// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor {

namespace {

const ::google::protobuf::Descriptor* ir_sensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ir_sensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* color_sensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  color_sensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* sensor_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sensor_msg_reflection_ = NULL;
struct sensor_msgOneofInstance {
  const ::sensor::ir_sensor* dist_data_;
  const ::sensor::color_sensor* color_data_;
}* sensor_msg_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sensor_2eproto() {
  protobuf_AddDesc_sensor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensor.proto");
  GOOGLE_CHECK(file != NULL);
  ir_sensor_descriptor_ = file->message_type(0);
  static const int ir_sensor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ir_sensor, distance_),
  };
  ir_sensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ir_sensor_descriptor_,
      ir_sensor::internal_default_instance(),
      ir_sensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(ir_sensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ir_sensor, _internal_metadata_));
  color_sensor_descriptor_ = file->message_type(1);
  static const int color_sensor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_sensor, color_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_sensor, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_sensor, y_),
  };
  color_sensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      color_sensor_descriptor_,
      color_sensor::internal_default_instance(),
      color_sensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(color_sensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(color_sensor, _internal_metadata_));
  sensor_msg_descriptor_ = file->message_type(2);
  static const int sensor_msg_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(sensor_msg_default_oneof_instance_, dist_data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(sensor_msg_default_oneof_instance_, color_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sensor_msg, msg_),
  };
  sensor_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      sensor_msg_descriptor_,
      sensor_msg::internal_default_instance(),
      sensor_msg_offsets_,
      -1,
      -1,
      -1,
      sensor_msg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sensor_msg, _oneof_case_[0]),
      sizeof(sensor_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sensor_msg, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ir_sensor_descriptor_, ir_sensor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      color_sensor_descriptor_, color_sensor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      sensor_msg_descriptor_, sensor_msg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensor_2eproto() {
  ir_sensor_default_instance_.Shutdown();
  delete ir_sensor_reflection_;
  color_sensor_default_instance_.Shutdown();
  delete color_sensor_reflection_;
  sensor_msg_default_instance_.Shutdown();
  delete sensor_msg_default_oneof_instance_;
  delete sensor_msg_reflection_;
}

void protobuf_InitDefaults_sensor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ir_sensor_default_instance_.DefaultConstruct();
  color_sensor_default_instance_.DefaultConstruct();
  sensor_msg_default_instance_.DefaultConstruct();
  sensor_msg_default_oneof_instance_ = new sensor_msgOneofInstance();
  ir_sensor_default_instance_.get_mutable()->InitAsDefaultInstance();
  color_sensor_default_instance_.get_mutable()->InitAsDefaultInstance();
  sensor_msg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_sensor_2eproto_once_);
void protobuf_InitDefaults_sensor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_sensor_2eproto_once_,
                 &protobuf_InitDefaults_sensor_2eproto_impl);
}
void protobuf_AddDesc_sensor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_sensor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014sensor.proto\022\006sensor\"\035\n\tir_sensor\022\020\n\010d"
    "istance\030\001 \001(\r\"8\n\014color_sensor\022\022\n\ncolor_c"
    "ode\030\001 \001(\r\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"g\n\nsenso"
    "r_msg\022&\n\tdist_data\030\001 \001(\0132\021.sensor.ir_sen"
    "sorH\000\022*\n\ncolor_data\030\002 \001(\0132\024.sensor.color"
    "_sensorH\000B\005\n\003msgb\006proto3", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensor_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sensor_2eproto_once_);
void protobuf_AddDesc_sensor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sensor_2eproto_once_,
                 &protobuf_AddDesc_sensor_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensor_2eproto {
  StaticDescriptorInitializer_sensor_2eproto() {
    protobuf_AddDesc_sensor_2eproto();
  }
} static_descriptor_initializer_sensor_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ir_sensor::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ir_sensor::ir_sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor.ir_sensor)
}

void ir_sensor::InitAsDefaultInstance() {
}

ir_sensor::ir_sensor(const ir_sensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor.ir_sensor)
}

void ir_sensor::SharedCtor() {
  distance_ = 0u;
  _cached_size_ = 0;
}

ir_sensor::~ir_sensor() {
  // @@protoc_insertion_point(destructor:sensor.ir_sensor)
  SharedDtor();
}

void ir_sensor::SharedDtor() {
}

void ir_sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ir_sensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ir_sensor_descriptor_;
}

const ir_sensor& ir_sensor::default_instance() {
  protobuf_InitDefaults_sensor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ir_sensor> ir_sensor_default_instance_;

ir_sensor* ir_sensor::New(::google::protobuf::Arena* arena) const {
  ir_sensor* n = new ir_sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ir_sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor.ir_sensor)
  distance_ = 0u;
}

bool ir_sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor.ir_sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 distance = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor.ir_sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor.ir_sensor)
  return false;
#undef DO_
}

void ir_sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor.ir_sensor)
  // optional uint32 distance = 1;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->distance(), output);
  }

  // @@protoc_insertion_point(serialize_end:sensor.ir_sensor)
}

::google::protobuf::uint8* ir_sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor.ir_sensor)
  // optional uint32 distance = 1;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->distance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sensor.ir_sensor)
  return target;
}

size_t ir_sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor.ir_sensor)
  size_t total_size = 0;

  // optional uint32 distance = 1;
  if (this->distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ir_sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor.ir_sensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ir_sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ir_sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor.ir_sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor.ir_sensor)
    UnsafeMergeFrom(*source);
  }
}

void ir_sensor::MergeFrom(const ir_sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor.ir_sensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ir_sensor::UnsafeMergeFrom(const ir_sensor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void ir_sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor.ir_sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ir_sensor::CopyFrom(const ir_sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor.ir_sensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ir_sensor::IsInitialized() const {

  return true;
}

void ir_sensor::Swap(ir_sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ir_sensor::InternalSwap(ir_sensor* other) {
  std::swap(distance_, other->distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ir_sensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ir_sensor_descriptor_;
  metadata.reflection = ir_sensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ir_sensor

// optional uint32 distance = 1;
void ir_sensor::clear_distance() {
  distance_ = 0u;
}
::google::protobuf::uint32 ir_sensor::distance() const {
  // @@protoc_insertion_point(field_get:sensor.ir_sensor.distance)
  return distance_;
}
void ir_sensor::set_distance(::google::protobuf::uint32 value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:sensor.ir_sensor.distance)
}

inline const ir_sensor* ir_sensor::internal_default_instance() {
  return &ir_sensor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int color_sensor::kColorCodeFieldNumber;
const int color_sensor::kXFieldNumber;
const int color_sensor::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

color_sensor::color_sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor.color_sensor)
}

void color_sensor::InitAsDefaultInstance() {
}

color_sensor::color_sensor(const color_sensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor.color_sensor)
}

void color_sensor::SharedCtor() {
  ::memset(&color_code_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&color_code_) + sizeof(y_));
  _cached_size_ = 0;
}

color_sensor::~color_sensor() {
  // @@protoc_insertion_point(destructor:sensor.color_sensor)
  SharedDtor();
}

void color_sensor::SharedDtor() {
}

void color_sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* color_sensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return color_sensor_descriptor_;
}

const color_sensor& color_sensor::default_instance() {
  protobuf_InitDefaults_sensor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<color_sensor> color_sensor_default_instance_;

color_sensor* color_sensor::New(::google::protobuf::Arena* arena) const {
  color_sensor* n = new color_sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void color_sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor.color_sensor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(color_sensor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<color_sensor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(color_code_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool color_sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor.color_sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color_code = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor.color_sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor.color_sensor)
  return false;
#undef DO_
}

void color_sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor.color_sensor)
  // optional uint32 color_code = 1;
  if (this->color_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color_code(), output);
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:sensor.color_sensor)
}

::google::protobuf::uint8* color_sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor.color_sensor)
  // optional uint32 color_code = 1;
  if (this->color_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color_code(), target);
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sensor.color_sensor)
  return target;
}

size_t color_sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor.color_sensor)
  size_t total_size = 0;

  // optional uint32 color_code = 1;
  if (this->color_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->color_code());
  }

  // optional int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void color_sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor.color_sensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const color_sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const color_sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor.color_sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor.color_sensor)
    UnsafeMergeFrom(*source);
  }
}

void color_sensor::MergeFrom(const color_sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor.color_sensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void color_sensor::UnsafeMergeFrom(const color_sensor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.color_code() != 0) {
    set_color_code(from.color_code());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void color_sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor.color_sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void color_sensor::CopyFrom(const color_sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor.color_sensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool color_sensor::IsInitialized() const {

  return true;
}

void color_sensor::Swap(color_sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void color_sensor::InternalSwap(color_sensor* other) {
  std::swap(color_code_, other->color_code_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata color_sensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = color_sensor_descriptor_;
  metadata.reflection = color_sensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// color_sensor

// optional uint32 color_code = 1;
void color_sensor::clear_color_code() {
  color_code_ = 0u;
}
::google::protobuf::uint32 color_sensor::color_code() const {
  // @@protoc_insertion_point(field_get:sensor.color_sensor.color_code)
  return color_code_;
}
void color_sensor::set_color_code(::google::protobuf::uint32 value) {
  
  color_code_ = value;
  // @@protoc_insertion_point(field_set:sensor.color_sensor.color_code)
}

// optional int32 x = 2;
void color_sensor::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 color_sensor::x() const {
  // @@protoc_insertion_point(field_get:sensor.color_sensor.x)
  return x_;
}
void color_sensor::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sensor.color_sensor.x)
}

// optional int32 y = 3;
void color_sensor::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 color_sensor::y() const {
  // @@protoc_insertion_point(field_get:sensor.color_sensor.y)
  return y_;
}
void color_sensor::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sensor.color_sensor.y)
}

inline const color_sensor* color_sensor::internal_default_instance() {
  return &color_sensor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sensor_msg::kDistDataFieldNumber;
const int sensor_msg::kColorDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sensor_msg::sensor_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sensor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor.sensor_msg)
}

void sensor_msg::InitAsDefaultInstance() {
  sensor_msg_default_oneof_instance_->dist_data_ = const_cast< ::sensor::ir_sensor*>(
      ::sensor::ir_sensor::internal_default_instance());
  sensor_msg_default_oneof_instance_->color_data_ = const_cast< ::sensor::color_sensor*>(
      ::sensor::color_sensor::internal_default_instance());
}

sensor_msg::sensor_msg(const sensor_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor.sensor_msg)
}

void sensor_msg::SharedCtor() {
  clear_has_msg();
  _cached_size_ = 0;
}

sensor_msg::~sensor_msg() {
  // @@protoc_insertion_point(destructor:sensor.sensor_msg)
  SharedDtor();
}

void sensor_msg::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void sensor_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sensor_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sensor_msg_descriptor_;
}

const sensor_msg& sensor_msg::default_instance() {
  protobuf_InitDefaults_sensor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<sensor_msg> sensor_msg_default_instance_;

sensor_msg* sensor_msg::New(::google::protobuf::Arena* arena) const {
  sensor_msg* n = new sensor_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sensor_msg::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:sensor.sensor_msg)
  switch (msg_case()) {
    case kDistData: {
      delete msg_.dist_data_;
      break;
    }
    case kColorData: {
      delete msg_.color_data_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void sensor_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor.sensor_msg)
  clear_msg();
}

bool sensor_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor.sensor_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sensor.ir_sensor dist_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dist_data()));
        } else {
          goto handle_unusual;
        }
        goto after_color_data;
        break;
      }

      // optional .sensor.color_sensor color_data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color_data()));
        } else {
          goto handle_unusual;
        }
       after_color_data:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor.sensor_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor.sensor_msg)
  return false;
#undef DO_
}

void sensor_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor.sensor_msg)
  // optional .sensor.ir_sensor dist_data = 1;
  if (has_dist_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.dist_data_, output);
  }

  // optional .sensor.color_sensor color_data = 2;
  if (has_color_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.color_data_, output);
  }

  // @@protoc_insertion_point(serialize_end:sensor.sensor_msg)
}

::google::protobuf::uint8* sensor_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor.sensor_msg)
  // optional .sensor.ir_sensor dist_data = 1;
  if (has_dist_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.dist_data_, false, target);
  }

  // optional .sensor.color_sensor color_data = 2;
  if (has_color_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.color_data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sensor.sensor_msg)
  return target;
}

size_t sensor_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor.sensor_msg)
  size_t total_size = 0;

  switch (msg_case()) {
    // optional .sensor.ir_sensor dist_data = 1;
    case kDistData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.dist_data_);
      break;
    }
    // optional .sensor.color_sensor color_data = 2;
    case kColorData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.color_data_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sensor_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor.sensor_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const sensor_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sensor_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor.sensor_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor.sensor_msg)
    UnsafeMergeFrom(*source);
  }
}

void sensor_msg::MergeFrom(const sensor_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor.sensor_msg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void sensor_msg::UnsafeMergeFrom(const sensor_msg& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_case()) {
    case kDistData: {
      mutable_dist_data()->::sensor::ir_sensor::MergeFrom(from.dist_data());
      break;
    }
    case kColorData: {
      mutable_color_data()->::sensor::color_sensor::MergeFrom(from.color_data());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void sensor_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor.sensor_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sensor_msg::CopyFrom(const sensor_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor.sensor_msg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool sensor_msg::IsInitialized() const {

  return true;
}

void sensor_msg::Swap(sensor_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sensor_msg::InternalSwap(sensor_msg* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sensor_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sensor_msg_descriptor_;
  metadata.reflection = sensor_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sensor_msg

// optional .sensor.ir_sensor dist_data = 1;
bool sensor_msg::has_dist_data() const {
  return msg_case() == kDistData;
}
void sensor_msg::set_has_dist_data() {
  _oneof_case_[0] = kDistData;
}
void sensor_msg::clear_dist_data() {
  if (has_dist_data()) {
    delete msg_.dist_data_;
    clear_has_msg();
  }
}
 const ::sensor::ir_sensor& sensor_msg::dist_data() const {
  // @@protoc_insertion_point(field_get:sensor.sensor_msg.dist_data)
  return has_dist_data()
      ? *msg_.dist_data_
      : ::sensor::ir_sensor::default_instance();
}
::sensor::ir_sensor* sensor_msg::mutable_dist_data() {
  if (!has_dist_data()) {
    clear_msg();
    set_has_dist_data();
    msg_.dist_data_ = new ::sensor::ir_sensor;
  }
  // @@protoc_insertion_point(field_mutable:sensor.sensor_msg.dist_data)
  return msg_.dist_data_;
}
::sensor::ir_sensor* sensor_msg::release_dist_data() {
  // @@protoc_insertion_point(field_release:sensor.sensor_msg.dist_data)
  if (has_dist_data()) {
    clear_has_msg();
    ::sensor::ir_sensor* temp = msg_.dist_data_;
    msg_.dist_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void sensor_msg::set_allocated_dist_data(::sensor::ir_sensor* dist_data) {
  clear_msg();
  if (dist_data) {
    set_has_dist_data();
    msg_.dist_data_ = dist_data;
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.sensor_msg.dist_data)
}

// optional .sensor.color_sensor color_data = 2;
bool sensor_msg::has_color_data() const {
  return msg_case() == kColorData;
}
void sensor_msg::set_has_color_data() {
  _oneof_case_[0] = kColorData;
}
void sensor_msg::clear_color_data() {
  if (has_color_data()) {
    delete msg_.color_data_;
    clear_has_msg();
  }
}
 const ::sensor::color_sensor& sensor_msg::color_data() const {
  // @@protoc_insertion_point(field_get:sensor.sensor_msg.color_data)
  return has_color_data()
      ? *msg_.color_data_
      : ::sensor::color_sensor::default_instance();
}
::sensor::color_sensor* sensor_msg::mutable_color_data() {
  if (!has_color_data()) {
    clear_msg();
    set_has_color_data();
    msg_.color_data_ = new ::sensor::color_sensor;
  }
  // @@protoc_insertion_point(field_mutable:sensor.sensor_msg.color_data)
  return msg_.color_data_;
}
::sensor::color_sensor* sensor_msg::release_color_data() {
  // @@protoc_insertion_point(field_release:sensor.sensor_msg.color_data)
  if (has_color_data()) {
    clear_has_msg();
    ::sensor::color_sensor* temp = msg_.color_data_;
    msg_.color_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void sensor_msg::set_allocated_color_data(::sensor::color_sensor* color_data) {
  clear_msg();
  if (color_data) {
    set_has_color_data();
    msg_.color_data_ = color_data;
  }
  // @@protoc_insertion_point(field_set_allocated:sensor.sensor_msg.color_data)
}

bool sensor_msg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void sensor_msg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
sensor_msg::MsgCase sensor_msg::msg_case() const {
  return sensor_msg::MsgCase(_oneof_case_[0]);
}
inline const sensor_msg* sensor_msg::internal_default_instance() {
  return &sensor_msg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor

// @@protoc_insertion_point(global_scope)
