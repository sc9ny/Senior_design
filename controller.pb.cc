// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace controller {

namespace {

const ::google::protobuf::Descriptor* movement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  movement_reflection_ = NULL;
const ::google::protobuf::Descriptor* button_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  button_reflection_ = NULL;
const ::google::protobuf::Descriptor* controller_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  controller_msg_reflection_ = NULL;
struct controller_msgOneofInstance {
  const ::controller::movement* go_;
  const ::controller::button* btn_;
}* controller_msg_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_controller_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_controller_2eproto() {
  protobuf_AddDesc_controller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "controller.proto");
  GOOGLE_CHECK(file != NULL);
  movement_descriptor_ = file->message_type(0);
  static const int movement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(movement, direction_),
  };
  movement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      movement_descriptor_,
      movement::internal_default_instance(),
      movement_offsets_,
      -1,
      -1,
      -1,
      sizeof(movement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(movement, _internal_metadata_));
  button_descriptor_ = file->message_type(1);
  static const int button_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(button, button_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(button, value_),
  };
  button_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      button_descriptor_,
      button::internal_default_instance(),
      button_offsets_,
      -1,
      -1,
      -1,
      sizeof(button),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(button, _internal_metadata_));
  controller_msg_descriptor_ = file->message_type(2);
  static const int controller_msg_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(controller_msg_default_oneof_instance_, go_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(controller_msg_default_oneof_instance_, btn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controller_msg, msg_),
  };
  controller_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      controller_msg_descriptor_,
      controller_msg::internal_default_instance(),
      controller_msg_offsets_,
      -1,
      -1,
      -1,
      controller_msg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controller_msg, _oneof_case_[0]),
      sizeof(controller_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controller_msg, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_controller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      movement_descriptor_, movement::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      button_descriptor_, button::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      controller_msg_descriptor_, controller_msg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_controller_2eproto() {
  movement_default_instance_.Shutdown();
  delete movement_reflection_;
  button_default_instance_.Shutdown();
  delete button_reflection_;
  controller_msg_default_instance_.Shutdown();
  delete controller_msg_default_oneof_instance_;
  delete controller_msg_reflection_;
}

void protobuf_InitDefaults_controller_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  movement_default_instance_.DefaultConstruct();
  button_default_instance_.DefaultConstruct();
  controller_msg_default_instance_.DefaultConstruct();
  controller_msg_default_oneof_instance_ = new controller_msgOneofInstance();
  movement_default_instance_.get_mutable()->InitAsDefaultInstance();
  button_default_instance_.get_mutable()->InitAsDefaultInstance();
  controller_msg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_controller_2eproto_once_);
void protobuf_InitDefaults_controller_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_controller_2eproto_once_,
                 &protobuf_InitDefaults_controller_2eproto_impl);
}
void protobuf_AddDesc_controller_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_controller_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020controller.proto\022\ncontroller\"\035\n\010moveme"
    "nt\022\021\n\tdirection\030\001 \001(\005\"*\n\006button\022\021\n\tbutto"
    "n_id\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"^\n\016controller_"
    "msg\022\"\n\002go\030\001 \001(\0132\024.controller.movementH\000\022"
    "!\n\003btn\030\002 \001(\0132\022.controller.buttonH\000B\005\n\003ms"
    "gb\006proto3", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controller.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_controller_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_controller_2eproto_once_);
void protobuf_AddDesc_controller_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_controller_2eproto_once_,
                 &protobuf_AddDesc_controller_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_controller_2eproto {
  StaticDescriptorInitializer_controller_2eproto() {
    protobuf_AddDesc_controller_2eproto();
  }
} static_descriptor_initializer_controller_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int movement::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

movement::movement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_controller_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.movement)
}

void movement::InitAsDefaultInstance() {
}

movement::movement(const movement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:controller.movement)
}

void movement::SharedCtor() {
  direction_ = 0;
  _cached_size_ = 0;
}

movement::~movement() {
  // @@protoc_insertion_point(destructor:controller.movement)
  SharedDtor();
}

void movement::SharedDtor() {
}

void movement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* movement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return movement_descriptor_;
}

const movement& movement::default_instance() {
  protobuf_InitDefaults_controller_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<movement> movement_default_instance_;

movement* movement::New(::google::protobuf::Arena* arena) const {
  movement* n = new movement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void movement::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.movement)
  direction_ = 0;
}

bool movement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.movement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 direction = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.movement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.movement)
  return false;
#undef DO_
}

void movement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.movement)
  // optional int32 direction = 1;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->direction(), output);
  }

  // @@protoc_insertion_point(serialize_end:controller.movement)
}

::google::protobuf::uint8* movement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.movement)
  // optional int32 direction = 1;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->direction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:controller.movement)
  return target;
}

size_t movement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.movement)
  size_t total_size = 0;

  // optional int32 direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void movement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.movement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const movement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const movement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.movement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.movement)
    UnsafeMergeFrom(*source);
  }
}

void movement::MergeFrom(const movement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.movement)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void movement::UnsafeMergeFrom(const movement& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void movement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.movement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void movement::CopyFrom(const movement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.movement)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool movement::IsInitialized() const {

  return true;
}

void movement::Swap(movement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void movement::InternalSwap(movement* other) {
  std::swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata movement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = movement_descriptor_;
  metadata.reflection = movement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// movement

// optional int32 direction = 1;
void movement::clear_direction() {
  direction_ = 0;
}
::google::protobuf::int32 movement::direction() const {
  // @@protoc_insertion_point(field_get:controller.movement.direction)
  return direction_;
}
void movement::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:controller.movement.direction)
}

inline const movement* movement::internal_default_instance() {
  return &movement_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int button::kButtonIdFieldNumber;
const int button::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

button::button()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_controller_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.button)
}

void button::InitAsDefaultInstance() {
}

button::button(const button& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:controller.button)
}

void button::SharedCtor() {
  ::memset(&button_id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&button_id_) + sizeof(value_));
  _cached_size_ = 0;
}

button::~button() {
  // @@protoc_insertion_point(destructor:controller.button)
  SharedDtor();
}

void button::SharedDtor() {
}

void button::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* button::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return button_descriptor_;
}

const button& button::default_instance() {
  protobuf_InitDefaults_controller_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<button> button_default_instance_;

button* button::New(::google::protobuf::Arena* arena) const {
  button* n = new button;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void button::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.button)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(button, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<button*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(button_id_, value_);

#undef ZR_HELPER_
#undef ZR_

}

bool button::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.button)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 button_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &button_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.button)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.button)
  return false;
#undef DO_
}

void button::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.button)
  // optional int32 button_id = 1;
  if (this->button_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->button_id(), output);
  }

  // optional int32 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:controller.button)
}

::google::protobuf::uint8* button::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.button)
  // optional int32 button_id = 1;
  if (this->button_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->button_id(), target);
  }

  // optional int32 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:controller.button)
  return target;
}

size_t button::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.button)
  size_t total_size = 0;

  // optional int32 button_id = 1;
  if (this->button_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->button_id());
  }

  // optional int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void button::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.button)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const button* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const button>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.button)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.button)
    UnsafeMergeFrom(*source);
  }
}

void button::MergeFrom(const button& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.button)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void button::UnsafeMergeFrom(const button& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.button_id() != 0) {
    set_button_id(from.button_id());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void button::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.button)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void button::CopyFrom(const button& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.button)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool button::IsInitialized() const {

  return true;
}

void button::Swap(button* other) {
  if (other == this) return;
  InternalSwap(other);
}
void button::InternalSwap(button* other) {
  std::swap(button_id_, other->button_id_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata button::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = button_descriptor_;
  metadata.reflection = button_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// button

// optional int32 button_id = 1;
void button::clear_button_id() {
  button_id_ = 0;
}
::google::protobuf::int32 button::button_id() const {
  // @@protoc_insertion_point(field_get:controller.button.button_id)
  return button_id_;
}
void button::set_button_id(::google::protobuf::int32 value) {
  
  button_id_ = value;
  // @@protoc_insertion_point(field_set:controller.button.button_id)
}

// optional int32 value = 2;
void button::clear_value() {
  value_ = 0;
}
::google::protobuf::int32 button::value() const {
  // @@protoc_insertion_point(field_get:controller.button.value)
  return value_;
}
void button::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:controller.button.value)
}

inline const button* button::internal_default_instance() {
  return &button_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int controller_msg::kGoFieldNumber;
const int controller_msg::kBtnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

controller_msg::controller_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_controller_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:controller.controller_msg)
}

void controller_msg::InitAsDefaultInstance() {
  controller_msg_default_oneof_instance_->go_ = const_cast< ::controller::movement*>(
      ::controller::movement::internal_default_instance());
  controller_msg_default_oneof_instance_->btn_ = const_cast< ::controller::button*>(
      ::controller::button::internal_default_instance());
}

controller_msg::controller_msg(const controller_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:controller.controller_msg)
}

void controller_msg::SharedCtor() {
  clear_has_msg();
  _cached_size_ = 0;
}

controller_msg::~controller_msg() {
  // @@protoc_insertion_point(destructor:controller.controller_msg)
  SharedDtor();
}

void controller_msg::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void controller_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* controller_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return controller_msg_descriptor_;
}

const controller_msg& controller_msg::default_instance() {
  protobuf_InitDefaults_controller_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<controller_msg> controller_msg_default_instance_;

controller_msg* controller_msg::New(::google::protobuf::Arena* arena) const {
  controller_msg* n = new controller_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void controller_msg::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:controller.controller_msg)
  switch (msg_case()) {
    case kGo: {
      delete msg_.go_;
      break;
    }
    case kBtn: {
      delete msg_.btn_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void controller_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:controller.controller_msg)
  clear_msg();
}

bool controller_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:controller.controller_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .controller.movement go = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_go()));
        } else {
          goto handle_unusual;
        }
        goto after_btn;
        break;
      }

      // optional .controller.button btn = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_btn()));
        } else {
          goto handle_unusual;
        }
       after_btn:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:controller.controller_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:controller.controller_msg)
  return false;
#undef DO_
}

void controller_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:controller.controller_msg)
  // optional .controller.movement go = 1;
  if (has_go()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.go_, output);
  }

  // optional .controller.button btn = 2;
  if (has_btn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.btn_, output);
  }

  // @@protoc_insertion_point(serialize_end:controller.controller_msg)
}

::google::protobuf::uint8* controller_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:controller.controller_msg)
  // optional .controller.movement go = 1;
  if (has_go()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.go_, false, target);
  }

  // optional .controller.button btn = 2;
  if (has_btn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.btn_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:controller.controller_msg)
  return target;
}

size_t controller_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:controller.controller_msg)
  size_t total_size = 0;

  switch (msg_case()) {
    // optional .controller.movement go = 1;
    case kGo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.go_);
      break;
    }
    // optional .controller.button btn = 2;
    case kBtn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.btn_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void controller_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:controller.controller_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const controller_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const controller_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:controller.controller_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:controller.controller_msg)
    UnsafeMergeFrom(*source);
  }
}

void controller_msg::MergeFrom(const controller_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:controller.controller_msg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void controller_msg::UnsafeMergeFrom(const controller_msg& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_case()) {
    case kGo: {
      mutable_go()->::controller::movement::MergeFrom(from.go());
      break;
    }
    case kBtn: {
      mutable_btn()->::controller::button::MergeFrom(from.btn());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void controller_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:controller.controller_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void controller_msg::CopyFrom(const controller_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:controller.controller_msg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool controller_msg::IsInitialized() const {

  return true;
}

void controller_msg::Swap(controller_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void controller_msg::InternalSwap(controller_msg* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata controller_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = controller_msg_descriptor_;
  metadata.reflection = controller_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// controller_msg

// optional .controller.movement go = 1;
bool controller_msg::has_go() const {
  return msg_case() == kGo;
}
void controller_msg::set_has_go() {
  _oneof_case_[0] = kGo;
}
void controller_msg::clear_go() {
  if (has_go()) {
    delete msg_.go_;
    clear_has_msg();
  }
}
 const ::controller::movement& controller_msg::go() const {
  // @@protoc_insertion_point(field_get:controller.controller_msg.go)
  return has_go()
      ? *msg_.go_
      : ::controller::movement::default_instance();
}
::controller::movement* controller_msg::mutable_go() {
  if (!has_go()) {
    clear_msg();
    set_has_go();
    msg_.go_ = new ::controller::movement;
  }
  // @@protoc_insertion_point(field_mutable:controller.controller_msg.go)
  return msg_.go_;
}
::controller::movement* controller_msg::release_go() {
  // @@protoc_insertion_point(field_release:controller.controller_msg.go)
  if (has_go()) {
    clear_has_msg();
    ::controller::movement* temp = msg_.go_;
    msg_.go_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void controller_msg::set_allocated_go(::controller::movement* go) {
  clear_msg();
  if (go) {
    set_has_go();
    msg_.go_ = go;
  }
  // @@protoc_insertion_point(field_set_allocated:controller.controller_msg.go)
}

// optional .controller.button btn = 2;
bool controller_msg::has_btn() const {
  return msg_case() == kBtn;
}
void controller_msg::set_has_btn() {
  _oneof_case_[0] = kBtn;
}
void controller_msg::clear_btn() {
  if (has_btn()) {
    delete msg_.btn_;
    clear_has_msg();
  }
}
 const ::controller::button& controller_msg::btn() const {
  // @@protoc_insertion_point(field_get:controller.controller_msg.btn)
  return has_btn()
      ? *msg_.btn_
      : ::controller::button::default_instance();
}
::controller::button* controller_msg::mutable_btn() {
  if (!has_btn()) {
    clear_msg();
    set_has_btn();
    msg_.btn_ = new ::controller::button;
  }
  // @@protoc_insertion_point(field_mutable:controller.controller_msg.btn)
  return msg_.btn_;
}
::controller::button* controller_msg::release_btn() {
  // @@protoc_insertion_point(field_release:controller.controller_msg.btn)
  if (has_btn()) {
    clear_has_msg();
    ::controller::button* temp = msg_.btn_;
    msg_.btn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void controller_msg::set_allocated_btn(::controller::button* btn) {
  clear_msg();
  if (btn) {
    set_has_btn();
    msg_.btn_ = btn;
  }
  // @@protoc_insertion_point(field_set_allocated:controller.controller_msg.btn)
}

bool controller_msg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void controller_msg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
controller_msg::MsgCase controller_msg::msg_case() const {
  return controller_msg::MsgCase(_oneof_case_[0]);
}
inline const controller_msg* controller_msg::internal_default_instance() {
  return &controller_msg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace controller

// @@protoc_insertion_point(global_scope)
