# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: server.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import sensor_pb2 as sensor__pb2
import motor_pb2 as motor__pb2
import emulator_pb2 as emulator__pb2
import status_pb2 as status__pb2
import controller_pb2 as controller__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='server.proto',
  package='server',
  syntax='proto3',
  serialized_pb=_b('\n\x0cserver.proto\x12\x06server\x1a\x0csensor.proto\x1a\x0bmotor.proto\x1a\x0e\x65mulator.proto\x1a\x0cstatus.proto\x1a\x10\x63ontroller.proto\"\xc3\x03\n\x06server\x12\x17\n\x0fsequence_number\x18\x01 \x01(\x05\x12\x0b\n\x03uid\x18\x02 \x01(\t\x12*\n\ncolor_data\x18\x03 \x01(\x0b\x32\x14.sensor.color_sensorH\x00\x12$\n\x07ir_data\x18\x04 \x01(\x0b\x32\x11.sensor.ir_sensorH\x00\x12 \n\x04mCmd\x18\x05 \x01(\x0b\x32\x10.motor.motor_ctlH\x00\x12!\n\x04\x64\x61ta\x18\x06 \x01(\x0b\x32\x11.motor.motor_dataH\x00\x12(\n\x06\x62\x61ttle\x18\x07 \x01(\x0b\x32\x16.emulator.battle_stateH\x00\x12 \n\x03\x61tk\x18\x08 \x01(\x0b\x32\x11.emulator.attacksH\x00\x12\'\n\x05\x61gain\x18\t \x01(\x0b\x32\x16.status.request_resendH\x00\x12(\n\x04\x64one\x18\n \x01(\x0b\x32\x18.status.request_completeH\x00\x12\'\n\x06health\x18\x0b \x01(\x0b\x32\x15.status.device_statusH\x00\x12)\n\x03\x63tl\x18\x0c \x01(\x0b\x32\x1a.controller.controller_msgH\x00\x42\t\n\x07payloadb\x06proto3')
  ,
  dependencies=[sensor__pb2.DESCRIPTOR,motor__pb2.DESCRIPTOR,emulator__pb2.DESCRIPTOR,status__pb2.DESCRIPTOR,controller__pb2.DESCRIPTOR,])




_SERVER = _descriptor.Descriptor(
  name='server',
  full_name='server.server',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sequence_number', full_name='server.server.sequence_number', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='uid', full_name='server.server.uid', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='color_data', full_name='server.server.color_data', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ir_data', full_name='server.server.ir_data', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='mCmd', full_name='server.server.mCmd', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='data', full_name='server.server.data', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='battle', full_name='server.server.battle', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='atk', full_name='server.server.atk', index=7,
      number=8, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='again', full_name='server.server.again', index=8,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='done', full_name='server.server.done', index=9,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='health', full_name='server.server.health', index=10,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ctl', full_name='server.server.ctl', index=11,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='payload', full_name='server.server.payload',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=100,
  serialized_end=551,
)

_SERVER.fields_by_name['color_data'].message_type = sensor__pb2._COLOR_SENSOR
_SERVER.fields_by_name['ir_data'].message_type = sensor__pb2._IR_SENSOR
_SERVER.fields_by_name['mCmd'].message_type = motor__pb2._MOTOR_CTL
_SERVER.fields_by_name['data'].message_type = motor__pb2._MOTOR_DATA
_SERVER.fields_by_name['battle'].message_type = emulator__pb2._BATTLE_STATE
_SERVER.fields_by_name['atk'].message_type = emulator__pb2._ATTACKS
_SERVER.fields_by_name['again'].message_type = status__pb2._REQUEST_RESEND
_SERVER.fields_by_name['done'].message_type = status__pb2._REQUEST_COMPLETE
_SERVER.fields_by_name['health'].message_type = status__pb2._DEVICE_STATUS
_SERVER.fields_by_name['ctl'].message_type = controller__pb2._CONTROLLER_MSG
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['color_data'])
_SERVER.fields_by_name['color_data'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['ir_data'])
_SERVER.fields_by_name['ir_data'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['mCmd'])
_SERVER.fields_by_name['mCmd'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['data'])
_SERVER.fields_by_name['data'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['battle'])
_SERVER.fields_by_name['battle'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['atk'])
_SERVER.fields_by_name['atk'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['again'])
_SERVER.fields_by_name['again'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['done'])
_SERVER.fields_by_name['done'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['health'])
_SERVER.fields_by_name['health'].containing_oneof = _SERVER.oneofs_by_name['payload']
_SERVER.oneofs_by_name['payload'].fields.append(
  _SERVER.fields_by_name['ctl'])
_SERVER.fields_by_name['ctl'].containing_oneof = _SERVER.oneofs_by_name['payload']
DESCRIPTOR.message_types_by_name['server'] = _SERVER
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

server = _reflection.GeneratedProtocolMessageType('server', (_message.Message,), dict(
  DESCRIPTOR = _SERVER,
  __module__ = 'server_pb2'
  # @@protoc_insertion_point(class_scope:server.server)
  ))
_sym_db.RegisterMessage(server)


# @@protoc_insertion_point(module_scope)
