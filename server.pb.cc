// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server {

namespace {

const ::google::protobuf::Descriptor* server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_reflection_ = NULL;
struct serverOneofInstance {
  const ::sensor::sensor_msg* scmd_;
  const ::motor::motor_msg* mcmd_;
  const ::emulator::emu_msg* bcmd_;
  const ::status::status_msg* stats_;
  const ::controller::controller_msg* ctl_;
}* server_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_server_2eproto() {
  protobuf_AddDesc_server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.proto");
  GOOGLE_CHECK(file != NULL);
  server_descriptor_ = file->message_type(0);
  static const int server_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, uid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(server_default_oneof_instance_, scmd_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(server_default_oneof_instance_, mcmd_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(server_default_oneof_instance_, bcmd_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(server_default_oneof_instance_, stats_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(server_default_oneof_instance_, ctl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, payload_),
  };
  server_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      server_descriptor_,
      server::internal_default_instance(),
      server_offsets_,
      -1,
      -1,
      -1,
      server_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, _oneof_case_[0]),
      sizeof(server),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      server_descriptor_, server::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eproto() {
  server_default_instance_.Shutdown();
  delete server_default_oneof_instance_;
  delete server_reflection_;
}

void protobuf_InitDefaults_server_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::sensor::protobuf_InitDefaults_sensor_2eproto();
  ::motor::protobuf_InitDefaults_motor_2eproto();
  ::emulator::protobuf_InitDefaults_emulator_2eproto();
  ::status::protobuf_InitDefaults_status_2eproto();
  ::controller::protobuf_InitDefaults_controller_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  server_default_instance_.DefaultConstruct();
  server_default_oneof_instance_ = new serverOneofInstance();
  server_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_server_2eproto_once_);
void protobuf_InitDefaults_server_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_server_2eproto_once_,
                 &protobuf_InitDefaults_server_2eproto_impl);
}
void protobuf_AddDesc_server_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_server_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014server.proto\022\006server\032\014sensor.proto\032\013mo"
    "tor.proto\032\016emulator.proto\032\014status.proto\032"
    "\020controller.proto\"\362\001\n\006server\022\027\n\017sequence"
    "_number\030\001 \001(\005\022\013\n\003uid\030\002 \001(\t\022\"\n\004sCmd\030\003 \001(\013"
    "2\022.sensor.sensor_msgH\000\022 \n\004mCmd\030\004 \001(\0132\020.m"
    "otor.motor_msgH\000\022!\n\004bCmd\030\005 \001(\0132\021.emulato"
    "r.emu_msgH\000\022#\n\005stats\030\006 \001(\0132\022.status.stat"
    "us_msgH\000\022)\n\003ctl\030\007 \001(\0132\032.controller.contr"
    "oller_msgH\000B\t\n\007payloadb\006proto3", 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.proto", &protobuf_RegisterTypes);
  ::sensor::protobuf_AddDesc_sensor_2eproto();
  ::motor::protobuf_AddDesc_motor_2eproto();
  ::emulator::protobuf_AddDesc_emulator_2eproto();
  ::status::protobuf_AddDesc_status_2eproto();
  ::controller::protobuf_AddDesc_controller_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_server_2eproto_once_);
void protobuf_AddDesc_server_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_server_2eproto_once_,
                 &protobuf_AddDesc_server_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eproto {
  StaticDescriptorInitializer_server_2eproto() {
    protobuf_AddDesc_server_2eproto();
  }
} static_descriptor_initializer_server_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int server::kSequenceNumberFieldNumber;
const int server::kUidFieldNumber;
const int server::kSCmdFieldNumber;
const int server::kMCmdFieldNumber;
const int server::kBCmdFieldNumber;
const int server::kStatsFieldNumber;
const int server::kCtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

server::server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_server_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.server)
}

void server::InitAsDefaultInstance() {
  server_default_oneof_instance_->scmd_ = const_cast< ::sensor::sensor_msg*>(
      ::sensor::sensor_msg::internal_default_instance());
  server_default_oneof_instance_->mcmd_ = const_cast< ::motor::motor_msg*>(
      ::motor::motor_msg::internal_default_instance());
  server_default_oneof_instance_->bcmd_ = const_cast< ::emulator::emu_msg*>(
      ::emulator::emu_msg::internal_default_instance());
  server_default_oneof_instance_->stats_ = const_cast< ::status::status_msg*>(
      ::status::status_msg::internal_default_instance());
  server_default_oneof_instance_->ctl_ = const_cast< ::controller::controller_msg*>(
      ::controller::controller_msg::internal_default_instance());
}

server::server(const server& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:server.server)
}

void server::SharedCtor() {
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = 0;
  clear_has_payload();
  _cached_size_ = 0;
}

server::~server() {
  // @@protoc_insertion_point(destructor:server.server)
  SharedDtor();
}

void server::SharedDtor() {
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_descriptor_;
}

const server& server::default_instance() {
  protobuf_InitDefaults_server_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<server> server_default_instance_;

server* server::New(::google::protobuf::Arena* arena) const {
  server* n = new server;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void server::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:server.server)
  switch (payload_case()) {
    case kSCmd: {
      delete payload_.scmd_;
      break;
    }
    case kMCmd: {
      delete payload_.mcmd_;
      break;
    }
    case kBCmd: {
      delete payload_.bcmd_;
      break;
    }
    case kStats: {
      delete payload_.stats_;
      break;
    }
    case kCtl: {
      delete payload_.ctl_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void server::Clear() {
// @@protoc_insertion_point(message_clear_start:server.server)
  sequence_number_ = 0;
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_payload();
}

bool server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_number = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.server.uid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sCmd;
        break;
      }

      // optional .sensor.sensor_msg sCmd = 3;
      case 3: {
        if (tag == 26) {
         parse_sCmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scmd()));
        } else {
          goto handle_unusual;
        }
        goto after_ctl;
        break;
      }

      // optional .motor.motor_msg mCmd = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mcmd()));
        } else {
          goto handle_unusual;
        }
        goto after_ctl;
        break;
      }

      // optional .emulator.emu_msg bCmd = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bcmd()));
        } else {
          goto handle_unusual;
        }
        goto after_ctl;
        break;
      }

      // optional .status.status_msg stats = 6;
      case 6: {
        if (tag == 50) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ctl;
        break;
      }

      // optional .controller.controller_msg ctl = 7;
      case 7: {
        if (tag == 58) {
         parse_ctl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctl()));
        } else {
          goto handle_unusual;
        }
       after_ctl:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.server)
  return false;
#undef DO_
}

void server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.server)
  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.server.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional .sensor.sensor_msg sCmd = 3;
  if (has_scmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.scmd_, output);
  }

  // optional .motor.motor_msg mCmd = 4;
  if (has_mcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.mcmd_, output);
  }

  // optional .emulator.emu_msg bCmd = 5;
  if (has_bcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.bcmd_, output);
  }

  // optional .status.status_msg stats = 6;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.stats_, output);
  }

  // optional .controller.controller_msg ctl = 7;
  if (has_ctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.ctl_, output);
  }

  // @@protoc_insertion_point(serialize_end:server.server)
}

::google::protobuf::uint8* server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.server)
  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.server.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional .sensor.sensor_msg sCmd = 3;
  if (has_scmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.scmd_, false, target);
  }

  // optional .motor.motor_msg mCmd = 4;
  if (has_mcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.mcmd_, false, target);
  }

  // optional .emulator.emu_msg bCmd = 5;
  if (has_bcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.bcmd_, false, target);
  }

  // optional .status.status_msg stats = 6;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.stats_, false, target);
  }

  // optional .controller.controller_msg ctl = 7;
  if (has_ctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *payload_.ctl_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:server.server)
  return target;
}

size_t server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.server)
  size_t total_size = 0;

  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  // optional string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  switch (payload_case()) {
    // optional .sensor.sensor_msg sCmd = 3;
    case kSCmd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.scmd_);
      break;
    }
    // optional .motor.motor_msg mCmd = 4;
    case kMCmd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.mcmd_);
      break;
    }
    // optional .emulator.emu_msg bCmd = 5;
    case kBCmd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.bcmd_);
      break;
    }
    // optional .status.status_msg stats = 6;
    case kStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.stats_);
      break;
    }
    // optional .controller.controller_msg ctl = 7;
    case kCtl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.ctl_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.server)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.server)
    UnsafeMergeFrom(*source);
  }
}

void server::MergeFrom(const server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.server)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void server::UnsafeMergeFrom(const server& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.payload_case()) {
    case kSCmd: {
      mutable_scmd()->::sensor::sensor_msg::MergeFrom(from.scmd());
      break;
    }
    case kMCmd: {
      mutable_mcmd()->::motor::motor_msg::MergeFrom(from.mcmd());
      break;
    }
    case kBCmd: {
      mutable_bcmd()->::emulator::emu_msg::MergeFrom(from.bcmd());
      break;
    }
    case kStats: {
      mutable_stats()->::status::status_msg::MergeFrom(from.stats());
      break;
    }
    case kCtl: {
      mutable_ctl()->::controller::controller_msg::MergeFrom(from.ctl());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
}

void server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server::CopyFrom(const server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.server)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool server::IsInitialized() const {

  return true;
}

void server::Swap(server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void server::InternalSwap(server* other) {
  std::swap(sequence_number_, other->sequence_number_);
  uid_.Swap(&other->uid_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_descriptor_;
  metadata.reflection = server_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// server

// optional int32 sequence_number = 1;
void server::clear_sequence_number() {
  sequence_number_ = 0;
}
::google::protobuf::int32 server::sequence_number() const {
  // @@protoc_insertion_point(field_get:server.server.sequence_number)
  return sequence_number_;
}
void server::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:server.server.sequence_number)
}

// optional string uid = 2;
void server::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& server::uid() const {
  // @@protoc_insertion_point(field_get:server.server.uid)
  return uid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void server::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.server.uid)
}
void server::set_uid(const char* value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.server.uid)
}
void server::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.server.uid)
}
::std::string* server::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:server.server.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* server::release_uid() {
  // @@protoc_insertion_point(field_release:server.server.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void server::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:server.server.uid)
}

// optional .sensor.sensor_msg sCmd = 3;
bool server::has_scmd() const {
  return payload_case() == kSCmd;
}
void server::set_has_scmd() {
  _oneof_case_[0] = kSCmd;
}
void server::clear_scmd() {
  if (has_scmd()) {
    delete payload_.scmd_;
    clear_has_payload();
  }
}
 const ::sensor::sensor_msg& server::scmd() const {
  // @@protoc_insertion_point(field_get:server.server.sCmd)
  return has_scmd()
      ? *payload_.scmd_
      : ::sensor::sensor_msg::default_instance();
}
::sensor::sensor_msg* server::mutable_scmd() {
  if (!has_scmd()) {
    clear_payload();
    set_has_scmd();
    payload_.scmd_ = new ::sensor::sensor_msg;
  }
  // @@protoc_insertion_point(field_mutable:server.server.sCmd)
  return payload_.scmd_;
}
::sensor::sensor_msg* server::release_scmd() {
  // @@protoc_insertion_point(field_release:server.server.sCmd)
  if (has_scmd()) {
    clear_has_payload();
    ::sensor::sensor_msg* temp = payload_.scmd_;
    payload_.scmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void server::set_allocated_scmd(::sensor::sensor_msg* scmd) {
  clear_payload();
  if (scmd) {
    set_has_scmd();
    payload_.scmd_ = scmd;
  }
  // @@protoc_insertion_point(field_set_allocated:server.server.sCmd)
}

// optional .motor.motor_msg mCmd = 4;
bool server::has_mcmd() const {
  return payload_case() == kMCmd;
}
void server::set_has_mcmd() {
  _oneof_case_[0] = kMCmd;
}
void server::clear_mcmd() {
  if (has_mcmd()) {
    delete payload_.mcmd_;
    clear_has_payload();
  }
}
 const ::motor::motor_msg& server::mcmd() const {
  // @@protoc_insertion_point(field_get:server.server.mCmd)
  return has_mcmd()
      ? *payload_.mcmd_
      : ::motor::motor_msg::default_instance();
}
::motor::motor_msg* server::mutable_mcmd() {
  if (!has_mcmd()) {
    clear_payload();
    set_has_mcmd();
    payload_.mcmd_ = new ::motor::motor_msg;
  }
  // @@protoc_insertion_point(field_mutable:server.server.mCmd)
  return payload_.mcmd_;
}
::motor::motor_msg* server::release_mcmd() {
  // @@protoc_insertion_point(field_release:server.server.mCmd)
  if (has_mcmd()) {
    clear_has_payload();
    ::motor::motor_msg* temp = payload_.mcmd_;
    payload_.mcmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void server::set_allocated_mcmd(::motor::motor_msg* mcmd) {
  clear_payload();
  if (mcmd) {
    set_has_mcmd();
    payload_.mcmd_ = mcmd;
  }
  // @@protoc_insertion_point(field_set_allocated:server.server.mCmd)
}

// optional .emulator.emu_msg bCmd = 5;
bool server::has_bcmd() const {
  return payload_case() == kBCmd;
}
void server::set_has_bcmd() {
  _oneof_case_[0] = kBCmd;
}
void server::clear_bcmd() {
  if (has_bcmd()) {
    delete payload_.bcmd_;
    clear_has_payload();
  }
}
 const ::emulator::emu_msg& server::bcmd() const {
  // @@protoc_insertion_point(field_get:server.server.bCmd)
  return has_bcmd()
      ? *payload_.bcmd_
      : ::emulator::emu_msg::default_instance();
}
::emulator::emu_msg* server::mutable_bcmd() {
  if (!has_bcmd()) {
    clear_payload();
    set_has_bcmd();
    payload_.bcmd_ = new ::emulator::emu_msg;
  }
  // @@protoc_insertion_point(field_mutable:server.server.bCmd)
  return payload_.bcmd_;
}
::emulator::emu_msg* server::release_bcmd() {
  // @@protoc_insertion_point(field_release:server.server.bCmd)
  if (has_bcmd()) {
    clear_has_payload();
    ::emulator::emu_msg* temp = payload_.bcmd_;
    payload_.bcmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void server::set_allocated_bcmd(::emulator::emu_msg* bcmd) {
  clear_payload();
  if (bcmd) {
    set_has_bcmd();
    payload_.bcmd_ = bcmd;
  }
  // @@protoc_insertion_point(field_set_allocated:server.server.bCmd)
}

// optional .status.status_msg stats = 6;
bool server::has_stats() const {
  return payload_case() == kStats;
}
void server::set_has_stats() {
  _oneof_case_[0] = kStats;
}
void server::clear_stats() {
  if (has_stats()) {
    delete payload_.stats_;
    clear_has_payload();
  }
}
 const ::status::status_msg& server::stats() const {
  // @@protoc_insertion_point(field_get:server.server.stats)
  return has_stats()
      ? *payload_.stats_
      : ::status::status_msg::default_instance();
}
::status::status_msg* server::mutable_stats() {
  if (!has_stats()) {
    clear_payload();
    set_has_stats();
    payload_.stats_ = new ::status::status_msg;
  }
  // @@protoc_insertion_point(field_mutable:server.server.stats)
  return payload_.stats_;
}
::status::status_msg* server::release_stats() {
  // @@protoc_insertion_point(field_release:server.server.stats)
  if (has_stats()) {
    clear_has_payload();
    ::status::status_msg* temp = payload_.stats_;
    payload_.stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void server::set_allocated_stats(::status::status_msg* stats) {
  clear_payload();
  if (stats) {
    set_has_stats();
    payload_.stats_ = stats;
  }
  // @@protoc_insertion_point(field_set_allocated:server.server.stats)
}

// optional .controller.controller_msg ctl = 7;
bool server::has_ctl() const {
  return payload_case() == kCtl;
}
void server::set_has_ctl() {
  _oneof_case_[0] = kCtl;
}
void server::clear_ctl() {
  if (has_ctl()) {
    delete payload_.ctl_;
    clear_has_payload();
  }
}
 const ::controller::controller_msg& server::ctl() const {
  // @@protoc_insertion_point(field_get:server.server.ctl)
  return has_ctl()
      ? *payload_.ctl_
      : ::controller::controller_msg::default_instance();
}
::controller::controller_msg* server::mutable_ctl() {
  if (!has_ctl()) {
    clear_payload();
    set_has_ctl();
    payload_.ctl_ = new ::controller::controller_msg;
  }
  // @@protoc_insertion_point(field_mutable:server.server.ctl)
  return payload_.ctl_;
}
::controller::controller_msg* server::release_ctl() {
  // @@protoc_insertion_point(field_release:server.server.ctl)
  if (has_ctl()) {
    clear_has_payload();
    ::controller::controller_msg* temp = payload_.ctl_;
    payload_.ctl_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void server::set_allocated_ctl(::controller::controller_msg* ctl) {
  clear_payload();
  if (ctl) {
    set_has_ctl();
    payload_.ctl_ = ctl;
  }
  // @@protoc_insertion_point(field_set_allocated:server.server.ctl)
}

bool server::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void server::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
server::PayloadCase server::payload_case() const {
  return server::PayloadCase(_oneof_case_[0]);
}
inline const server* server::internal_default_instance() {
  return &server_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)
