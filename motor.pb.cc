// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "motor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace motor {

namespace {

const ::google::protobuf::Descriptor* motor_ctl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  motor_ctl_reflection_ = NULL;
const ::google::protobuf::Descriptor* motor_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  motor_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* motor_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  motor_msg_reflection_ = NULL;
struct motor_msgOneofInstance {
  const ::motor::motor_ctl* ctl_msg_;
  const ::motor::motor_data* data_;
}* motor_msg_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_motor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_motor_2eproto() {
  protobuf_AddDesc_motor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "motor.proto");
  GOOGLE_CHECK(file != NULL);
  motor_ctl_descriptor_ = file->message_type(0);
  static const int motor_ctl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_ctl, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_ctl, adj_),
  };
  motor_ctl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      motor_ctl_descriptor_,
      motor_ctl::internal_default_instance(),
      motor_ctl_offsets_,
      -1,
      -1,
      -1,
      sizeof(motor_ctl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_ctl, _internal_metadata_));
  motor_data_descriptor_ = file->message_type(1);
  static const int motor_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_data, right_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_data, cur_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_data, left_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_data, right_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_data, left_err_),
  };
  motor_data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      motor_data_descriptor_,
      motor_data::internal_default_instance(),
      motor_data_offsets_,
      -1,
      -1,
      -1,
      sizeof(motor_data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_data, _internal_metadata_));
  motor_msg_descriptor_ = file->message_type(2);
  static const int motor_msg_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(motor_msg_default_oneof_instance_, ctl_msg_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(motor_msg_default_oneof_instance_, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_msg, msg_),
  };
  motor_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      motor_msg_descriptor_,
      motor_msg::internal_default_instance(),
      motor_msg_offsets_,
      -1,
      -1,
      -1,
      motor_msg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_msg, _oneof_case_[0]),
      sizeof(motor_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(motor_msg, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_motor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      motor_ctl_descriptor_, motor_ctl::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      motor_data_descriptor_, motor_data::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      motor_msg_descriptor_, motor_msg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_motor_2eproto() {
  motor_ctl_default_instance_.Shutdown();
  delete motor_ctl_reflection_;
  motor_data_default_instance_.Shutdown();
  delete motor_data_reflection_;
  motor_msg_default_instance_.Shutdown();
  delete motor_msg_default_oneof_instance_;
  delete motor_msg_reflection_;
}

void protobuf_InitDefaults_motor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  motor_ctl_default_instance_.DefaultConstruct();
  motor_data_default_instance_.DefaultConstruct();
  motor_msg_default_instance_.DefaultConstruct();
  motor_msg_default_oneof_instance_ = new motor_msgOneofInstance();
  motor_ctl_default_instance_.get_mutable()->InitAsDefaultInstance();
  motor_data_default_instance_.get_mutable()->InitAsDefaultInstance();
  motor_msg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_motor_2eproto_once_);
void protobuf_InitDefaults_motor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_motor_2eproto_once_,
                 &protobuf_InitDefaults_motor_2eproto_impl);
}
void protobuf_AddDesc_motor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_motor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013motor.proto\022\005motor\"+\n\tmotor_ctl\022\021\n\tdir"
    "ection\030\001 \001(\r\022\013\n\003adj\030\002 \001(\r\"k\n\nmotor_data\022"
    "\023\n\013right_ticks\030\001 \001(\r\022\017\n\007cur_dir\030\002 \001(\r\022\022\n"
    "\nleft_ticks\030\003 \001(\r\022\021\n\tright_err\030\004 \001(\r\022\020\n\010"
    "left_err\030\005 \001(\r\"Z\n\tmotor_msg\022#\n\007ctl_msg\030\001"
    " \001(\0132\020.motor.motor_ctlH\000\022!\n\004data\030\002 \001(\0132\021"
    ".motor.motor_dataH\000B\005\n\003msgb\006proto3", 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motor.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_motor_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_motor_2eproto_once_);
void protobuf_AddDesc_motor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_motor_2eproto_once_,
                 &protobuf_AddDesc_motor_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_motor_2eproto {
  StaticDescriptorInitializer_motor_2eproto() {
    protobuf_AddDesc_motor_2eproto();
  }
} static_descriptor_initializer_motor_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int motor_ctl::kDirectionFieldNumber;
const int motor_ctl::kAdjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

motor_ctl::motor_ctl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_motor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:motor.motor_ctl)
}

void motor_ctl::InitAsDefaultInstance() {
}

motor_ctl::motor_ctl(const motor_ctl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motor.motor_ctl)
}

void motor_ctl::SharedCtor() {
  ::memset(&direction_, 0, reinterpret_cast<char*>(&adj_) -
    reinterpret_cast<char*>(&direction_) + sizeof(adj_));
  _cached_size_ = 0;
}

motor_ctl::~motor_ctl() {
  // @@protoc_insertion_point(destructor:motor.motor_ctl)
  SharedDtor();
}

void motor_ctl::SharedDtor() {
}

void motor_ctl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* motor_ctl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return motor_ctl_descriptor_;
}

const motor_ctl& motor_ctl::default_instance() {
  protobuf_InitDefaults_motor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<motor_ctl> motor_ctl_default_instance_;

motor_ctl* motor_ctl::New(::google::protobuf::Arena* arena) const {
  motor_ctl* n = new motor_ctl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void motor_ctl::Clear() {
// @@protoc_insertion_point(message_clear_start:motor.motor_ctl)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(motor_ctl, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<motor_ctl*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(direction_, adj_);

#undef ZR_HELPER_
#undef ZR_

}

bool motor_ctl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motor.motor_ctl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 direction = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adj;
        break;
      }

      // optional uint32 adj = 2;
      case 2: {
        if (tag == 16) {
         parse_adj:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adj_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motor.motor_ctl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motor.motor_ctl)
  return false;
#undef DO_
}

void motor_ctl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motor.motor_ctl)
  // optional uint32 direction = 1;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->direction(), output);
  }

  // optional uint32 adj = 2;
  if (this->adj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->adj(), output);
  }

  // @@protoc_insertion_point(serialize_end:motor.motor_ctl)
}

::google::protobuf::uint8* motor_ctl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:motor.motor_ctl)
  // optional uint32 direction = 1;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->direction(), target);
  }

  // optional uint32 adj = 2;
  if (this->adj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->adj(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:motor.motor_ctl)
  return target;
}

size_t motor_ctl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motor.motor_ctl)
  size_t total_size = 0;

  // optional uint32 direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->direction());
  }

  // optional uint32 adj = 2;
  if (this->adj() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adj());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void motor_ctl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motor.motor_ctl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const motor_ctl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const motor_ctl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motor.motor_ctl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motor.motor_ctl)
    UnsafeMergeFrom(*source);
  }
}

void motor_ctl::MergeFrom(const motor_ctl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motor.motor_ctl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void motor_ctl::UnsafeMergeFrom(const motor_ctl& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.adj() != 0) {
    set_adj(from.adj());
  }
}

void motor_ctl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motor.motor_ctl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void motor_ctl::CopyFrom(const motor_ctl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motor.motor_ctl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool motor_ctl::IsInitialized() const {

  return true;
}

void motor_ctl::Swap(motor_ctl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void motor_ctl::InternalSwap(motor_ctl* other) {
  std::swap(direction_, other->direction_);
  std::swap(adj_, other->adj_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata motor_ctl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = motor_ctl_descriptor_;
  metadata.reflection = motor_ctl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// motor_ctl

// optional uint32 direction = 1;
void motor_ctl::clear_direction() {
  direction_ = 0u;
}
::google::protobuf::uint32 motor_ctl::direction() const {
  // @@protoc_insertion_point(field_get:motor.motor_ctl.direction)
  return direction_;
}
void motor_ctl::set_direction(::google::protobuf::uint32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:motor.motor_ctl.direction)
}

// optional uint32 adj = 2;
void motor_ctl::clear_adj() {
  adj_ = 0u;
}
::google::protobuf::uint32 motor_ctl::adj() const {
  // @@protoc_insertion_point(field_get:motor.motor_ctl.adj)
  return adj_;
}
void motor_ctl::set_adj(::google::protobuf::uint32 value) {
  
  adj_ = value;
  // @@protoc_insertion_point(field_set:motor.motor_ctl.adj)
}

inline const motor_ctl* motor_ctl::internal_default_instance() {
  return &motor_ctl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int motor_data::kRightTicksFieldNumber;
const int motor_data::kCurDirFieldNumber;
const int motor_data::kLeftTicksFieldNumber;
const int motor_data::kRightErrFieldNumber;
const int motor_data::kLeftErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

motor_data::motor_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_motor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:motor.motor_data)
}

void motor_data::InitAsDefaultInstance() {
}

motor_data::motor_data(const motor_data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motor.motor_data)
}

void motor_data::SharedCtor() {
  ::memset(&right_ticks_, 0, reinterpret_cast<char*>(&left_err_) -
    reinterpret_cast<char*>(&right_ticks_) + sizeof(left_err_));
  _cached_size_ = 0;
}

motor_data::~motor_data() {
  // @@protoc_insertion_point(destructor:motor.motor_data)
  SharedDtor();
}

void motor_data::SharedDtor() {
}

void motor_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* motor_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return motor_data_descriptor_;
}

const motor_data& motor_data::default_instance() {
  protobuf_InitDefaults_motor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<motor_data> motor_data_default_instance_;

motor_data* motor_data::New(::google::protobuf::Arena* arena) const {
  motor_data* n = new motor_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void motor_data::Clear() {
// @@protoc_insertion_point(message_clear_start:motor.motor_data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(motor_data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<motor_data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(right_ticks_, left_err_);

#undef ZR_HELPER_
#undef ZR_

}

bool motor_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motor.motor_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 right_ticks = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_ticks_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cur_dir;
        break;
      }

      // optional uint32 cur_dir = 2;
      case 2: {
        if (tag == 16) {
         parse_cur_dir:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_dir_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left_ticks;
        break;
      }

      // optional uint32 left_ticks = 3;
      case 3: {
        if (tag == 24) {
         parse_left_ticks:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_ticks_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_right_err;
        break;
      }

      // optional uint32 right_err = 4;
      case 4: {
        if (tag == 32) {
         parse_right_err:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_err_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_left_err;
        break;
      }

      // optional uint32 left_err = 5;
      case 5: {
        if (tag == 40) {
         parse_left_err:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_err_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motor.motor_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motor.motor_data)
  return false;
#undef DO_
}

void motor_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motor.motor_data)
  // optional uint32 right_ticks = 1;
  if (this->right_ticks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->right_ticks(), output);
  }

  // optional uint32 cur_dir = 2;
  if (this->cur_dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_dir(), output);
  }

  // optional uint32 left_ticks = 3;
  if (this->left_ticks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_ticks(), output);
  }

  // optional uint32 right_err = 4;
  if (this->right_err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->right_err(), output);
  }

  // optional uint32 left_err = 5;
  if (this->left_err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->left_err(), output);
  }

  // @@protoc_insertion_point(serialize_end:motor.motor_data)
}

::google::protobuf::uint8* motor_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:motor.motor_data)
  // optional uint32 right_ticks = 1;
  if (this->right_ticks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->right_ticks(), target);
  }

  // optional uint32 cur_dir = 2;
  if (this->cur_dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_dir(), target);
  }

  // optional uint32 left_ticks = 3;
  if (this->left_ticks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_ticks(), target);
  }

  // optional uint32 right_err = 4;
  if (this->right_err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->right_err(), target);
  }

  // optional uint32 left_err = 5;
  if (this->left_err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->left_err(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:motor.motor_data)
  return target;
}

size_t motor_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motor.motor_data)
  size_t total_size = 0;

  // optional uint32 right_ticks = 1;
  if (this->right_ticks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->right_ticks());
  }

  // optional uint32 cur_dir = 2;
  if (this->cur_dir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_dir());
  }

  // optional uint32 left_ticks = 3;
  if (this->left_ticks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_ticks());
  }

  // optional uint32 right_err = 4;
  if (this->right_err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->right_err());
  }

  // optional uint32 left_err = 5;
  if (this->left_err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void motor_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motor.motor_data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const motor_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const motor_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motor.motor_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motor.motor_data)
    UnsafeMergeFrom(*source);
  }
}

void motor_data::MergeFrom(const motor_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motor.motor_data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void motor_data::UnsafeMergeFrom(const motor_data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.right_ticks() != 0) {
    set_right_ticks(from.right_ticks());
  }
  if (from.cur_dir() != 0) {
    set_cur_dir(from.cur_dir());
  }
  if (from.left_ticks() != 0) {
    set_left_ticks(from.left_ticks());
  }
  if (from.right_err() != 0) {
    set_right_err(from.right_err());
  }
  if (from.left_err() != 0) {
    set_left_err(from.left_err());
  }
}

void motor_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motor.motor_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void motor_data::CopyFrom(const motor_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motor.motor_data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool motor_data::IsInitialized() const {

  return true;
}

void motor_data::Swap(motor_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void motor_data::InternalSwap(motor_data* other) {
  std::swap(right_ticks_, other->right_ticks_);
  std::swap(cur_dir_, other->cur_dir_);
  std::swap(left_ticks_, other->left_ticks_);
  std::swap(right_err_, other->right_err_);
  std::swap(left_err_, other->left_err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata motor_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = motor_data_descriptor_;
  metadata.reflection = motor_data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// motor_data

// optional uint32 right_ticks = 1;
void motor_data::clear_right_ticks() {
  right_ticks_ = 0u;
}
::google::protobuf::uint32 motor_data::right_ticks() const {
  // @@protoc_insertion_point(field_get:motor.motor_data.right_ticks)
  return right_ticks_;
}
void motor_data::set_right_ticks(::google::protobuf::uint32 value) {
  
  right_ticks_ = value;
  // @@protoc_insertion_point(field_set:motor.motor_data.right_ticks)
}

// optional uint32 cur_dir = 2;
void motor_data::clear_cur_dir() {
  cur_dir_ = 0u;
}
::google::protobuf::uint32 motor_data::cur_dir() const {
  // @@protoc_insertion_point(field_get:motor.motor_data.cur_dir)
  return cur_dir_;
}
void motor_data::set_cur_dir(::google::protobuf::uint32 value) {
  
  cur_dir_ = value;
  // @@protoc_insertion_point(field_set:motor.motor_data.cur_dir)
}

// optional uint32 left_ticks = 3;
void motor_data::clear_left_ticks() {
  left_ticks_ = 0u;
}
::google::protobuf::uint32 motor_data::left_ticks() const {
  // @@protoc_insertion_point(field_get:motor.motor_data.left_ticks)
  return left_ticks_;
}
void motor_data::set_left_ticks(::google::protobuf::uint32 value) {
  
  left_ticks_ = value;
  // @@protoc_insertion_point(field_set:motor.motor_data.left_ticks)
}

// optional uint32 right_err = 4;
void motor_data::clear_right_err() {
  right_err_ = 0u;
}
::google::protobuf::uint32 motor_data::right_err() const {
  // @@protoc_insertion_point(field_get:motor.motor_data.right_err)
  return right_err_;
}
void motor_data::set_right_err(::google::protobuf::uint32 value) {
  
  right_err_ = value;
  // @@protoc_insertion_point(field_set:motor.motor_data.right_err)
}

// optional uint32 left_err = 5;
void motor_data::clear_left_err() {
  left_err_ = 0u;
}
::google::protobuf::uint32 motor_data::left_err() const {
  // @@protoc_insertion_point(field_get:motor.motor_data.left_err)
  return left_err_;
}
void motor_data::set_left_err(::google::protobuf::uint32 value) {
  
  left_err_ = value;
  // @@protoc_insertion_point(field_set:motor.motor_data.left_err)
}

inline const motor_data* motor_data::internal_default_instance() {
  return &motor_data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int motor_msg::kCtlMsgFieldNumber;
const int motor_msg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

motor_msg::motor_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_motor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:motor.motor_msg)
}

void motor_msg::InitAsDefaultInstance() {
  motor_msg_default_oneof_instance_->ctl_msg_ = const_cast< ::motor::motor_ctl*>(
      ::motor::motor_ctl::internal_default_instance());
  motor_msg_default_oneof_instance_->data_ = const_cast< ::motor::motor_data*>(
      ::motor::motor_data::internal_default_instance());
}

motor_msg::motor_msg(const motor_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:motor.motor_msg)
}

void motor_msg::SharedCtor() {
  clear_has_msg();
  _cached_size_ = 0;
}

motor_msg::~motor_msg() {
  // @@protoc_insertion_point(destructor:motor.motor_msg)
  SharedDtor();
}

void motor_msg::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void motor_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* motor_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return motor_msg_descriptor_;
}

const motor_msg& motor_msg::default_instance() {
  protobuf_InitDefaults_motor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<motor_msg> motor_msg_default_instance_;

motor_msg* motor_msg::New(::google::protobuf::Arena* arena) const {
  motor_msg* n = new motor_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void motor_msg::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:motor.motor_msg)
  switch (msg_case()) {
    case kCtlMsg: {
      delete msg_.ctl_msg_;
      break;
    }
    case kData: {
      delete msg_.data_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void motor_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:motor.motor_msg)
  clear_msg();
}

bool motor_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motor.motor_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .motor.motor_ctl ctl_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctl_msg()));
        } else {
          goto handle_unusual;
        }
        goto after_data;
        break;
      }

      // optional .motor.motor_data data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
       after_data:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motor.motor_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motor.motor_msg)
  return false;
#undef DO_
}

void motor_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motor.motor_msg)
  // optional .motor.motor_ctl ctl_msg = 1;
  if (has_ctl_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.ctl_msg_, output);
  }

  // optional .motor.motor_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.data_, output);
  }

  // @@protoc_insertion_point(serialize_end:motor.motor_msg)
}

::google::protobuf::uint8* motor_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:motor.motor_msg)
  // optional .motor.motor_ctl ctl_msg = 1;
  if (has_ctl_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.ctl_msg_, false, target);
  }

  // optional .motor.motor_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:motor.motor_msg)
  return target;
}

size_t motor_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motor.motor_msg)
  size_t total_size = 0;

  switch (msg_case()) {
    // optional .motor.motor_ctl ctl_msg = 1;
    case kCtlMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ctl_msg_);
      break;
    }
    // optional .motor.motor_data data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.data_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void motor_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motor.motor_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const motor_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const motor_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motor.motor_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motor.motor_msg)
    UnsafeMergeFrom(*source);
  }
}

void motor_msg::MergeFrom(const motor_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motor.motor_msg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void motor_msg::UnsafeMergeFrom(const motor_msg& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_case()) {
    case kCtlMsg: {
      mutable_ctl_msg()->::motor::motor_ctl::MergeFrom(from.ctl_msg());
      break;
    }
    case kData: {
      mutable_data()->::motor::motor_data::MergeFrom(from.data());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void motor_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motor.motor_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void motor_msg::CopyFrom(const motor_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motor.motor_msg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool motor_msg::IsInitialized() const {

  return true;
}

void motor_msg::Swap(motor_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void motor_msg::InternalSwap(motor_msg* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata motor_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = motor_msg_descriptor_;
  metadata.reflection = motor_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// motor_msg

// optional .motor.motor_ctl ctl_msg = 1;
bool motor_msg::has_ctl_msg() const {
  return msg_case() == kCtlMsg;
}
void motor_msg::set_has_ctl_msg() {
  _oneof_case_[0] = kCtlMsg;
}
void motor_msg::clear_ctl_msg() {
  if (has_ctl_msg()) {
    delete msg_.ctl_msg_;
    clear_has_msg();
  }
}
 const ::motor::motor_ctl& motor_msg::ctl_msg() const {
  // @@protoc_insertion_point(field_get:motor.motor_msg.ctl_msg)
  return has_ctl_msg()
      ? *msg_.ctl_msg_
      : ::motor::motor_ctl::default_instance();
}
::motor::motor_ctl* motor_msg::mutable_ctl_msg() {
  if (!has_ctl_msg()) {
    clear_msg();
    set_has_ctl_msg();
    msg_.ctl_msg_ = new ::motor::motor_ctl;
  }
  // @@protoc_insertion_point(field_mutable:motor.motor_msg.ctl_msg)
  return msg_.ctl_msg_;
}
::motor::motor_ctl* motor_msg::release_ctl_msg() {
  // @@protoc_insertion_point(field_release:motor.motor_msg.ctl_msg)
  if (has_ctl_msg()) {
    clear_has_msg();
    ::motor::motor_ctl* temp = msg_.ctl_msg_;
    msg_.ctl_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void motor_msg::set_allocated_ctl_msg(::motor::motor_ctl* ctl_msg) {
  clear_msg();
  if (ctl_msg) {
    set_has_ctl_msg();
    msg_.ctl_msg_ = ctl_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:motor.motor_msg.ctl_msg)
}

// optional .motor.motor_data data = 2;
bool motor_msg::has_data() const {
  return msg_case() == kData;
}
void motor_msg::set_has_data() {
  _oneof_case_[0] = kData;
}
void motor_msg::clear_data() {
  if (has_data()) {
    delete msg_.data_;
    clear_has_msg();
  }
}
 const ::motor::motor_data& motor_msg::data() const {
  // @@protoc_insertion_point(field_get:motor.motor_msg.data)
  return has_data()
      ? *msg_.data_
      : ::motor::motor_data::default_instance();
}
::motor::motor_data* motor_msg::mutable_data() {
  if (!has_data()) {
    clear_msg();
    set_has_data();
    msg_.data_ = new ::motor::motor_data;
  }
  // @@protoc_insertion_point(field_mutable:motor.motor_msg.data)
  return msg_.data_;
}
::motor::motor_data* motor_msg::release_data() {
  // @@protoc_insertion_point(field_release:motor.motor_msg.data)
  if (has_data()) {
    clear_has_msg();
    ::motor::motor_data* temp = msg_.data_;
    msg_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void motor_msg::set_allocated_data(::motor::motor_data* data) {
  clear_msg();
  if (data) {
    set_has_data();
    msg_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:motor.motor_msg.data)
}

bool motor_msg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void motor_msg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
motor_msg::MsgCase motor_msg::msg_case() const {
  return motor_msg::MsgCase(_oneof_case_[0]);
}
inline const motor_msg* motor_msg::internal_default_instance() {
  return &motor_msg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace motor

// @@protoc_insertion_point(global_scope)
