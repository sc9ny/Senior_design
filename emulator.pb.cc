// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emulator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "emulator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace emulator {

namespace {

const ::google::protobuf::Descriptor* battle_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* attacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  attacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* emu_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emu_msg_reflection_ = NULL;
struct emu_msgOneofInstance {
  const ::emulator::battle_state* battle_ctl_;
  const ::emulator::attacks* battle_move_;
}* emu_msg_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_emulator_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_emulator_2eproto() {
  protobuf_AddDesc_emulator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "emulator.proto");
  GOOGLE_CHECK(file != NULL);
  battle_state_descriptor_ = file->message_type(0);
  static const int battle_state_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_state, player_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_state, match_inprogress_),
  };
  battle_state_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      battle_state_descriptor_,
      battle_state::internal_default_instance(),
      battle_state_offsets_,
      -1,
      -1,
      -1,
      sizeof(battle_state),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_state, _internal_metadata_));
  attacks_descriptor_ = file->message_type(1);
  static const int attacks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(attacks, trainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(attacks, move_),
  };
  attacks_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      attacks_descriptor_,
      attacks::internal_default_instance(),
      attacks_offsets_,
      -1,
      -1,
      -1,
      sizeof(attacks),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(attacks, _internal_metadata_));
  emu_msg_descriptor_ = file->message_type(2);
  static const int emu_msg_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(emu_msg_default_oneof_instance_, battle_ctl_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(emu_msg_default_oneof_instance_, battle_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emu_msg, msg_),
  };
  emu_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      emu_msg_descriptor_,
      emu_msg::internal_default_instance(),
      emu_msg_offsets_,
      -1,
      -1,
      -1,
      emu_msg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emu_msg, _oneof_case_[0]),
      sizeof(emu_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emu_msg, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_emulator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      battle_state_descriptor_, battle_state::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      attacks_descriptor_, attacks::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      emu_msg_descriptor_, emu_msg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_emulator_2eproto() {
  battle_state_default_instance_.Shutdown();
  delete battle_state_reflection_;
  attacks_default_instance_.Shutdown();
  delete attacks_reflection_;
  emu_msg_default_instance_.Shutdown();
  delete emu_msg_default_oneof_instance_;
  delete emu_msg_reflection_;
}

void protobuf_InitDefaults_emulator_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  battle_state_default_instance_.DefaultConstruct();
  attacks_default_instance_.DefaultConstruct();
  emu_msg_default_instance_.DefaultConstruct();
  emu_msg_default_oneof_instance_ = new emu_msgOneofInstance();
  battle_state_default_instance_.get_mutable()->InitAsDefaultInstance();
  attacks_default_instance_.get_mutable()->InitAsDefaultInstance();
  emu_msg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_emulator_2eproto_once_);
void protobuf_InitDefaults_emulator_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_emulator_2eproto_once_,
                 &protobuf_InitDefaults_emulator_2eproto_impl);
}
void protobuf_AddDesc_emulator_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_emulator_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016emulator.proto\022\010emulator\"\?\n\014battle_sta"
    "te\022\025\n\rplayer_status\030\001 \001(\010\022\030\n\020match_inPro"
    "gress\030\002 \001(\r\"(\n\007attacks\022\017\n\007trainer\030\001 \001(\010\022"
    "\014\n\004move\030\002 \001(\r\"h\n\007emu_msg\022,\n\nbattle_ctl\030\001"
    " \001(\0132\026.emulator.battle_stateH\000\022(\n\013battle"
    "_move\030\002 \001(\0132\021.emulator.attacksH\000B\005\n\003msgb"
    "\006proto3", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "emulator.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_emulator_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_emulator_2eproto_once_);
void protobuf_AddDesc_emulator_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_emulator_2eproto_once_,
                 &protobuf_AddDesc_emulator_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_emulator_2eproto {
  StaticDescriptorInitializer_emulator_2eproto() {
    protobuf_AddDesc_emulator_2eproto();
  }
} static_descriptor_initializer_emulator_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int battle_state::kPlayerStatusFieldNumber;
const int battle_state::kMatchInProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

battle_state::battle_state()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_emulator_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:emulator.battle_state)
}

void battle_state::InitAsDefaultInstance() {
}

battle_state::battle_state(const battle_state& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:emulator.battle_state)
}

void battle_state::SharedCtor() {
  ::memset(&player_status_, 0, reinterpret_cast<char*>(&match_inprogress_) -
    reinterpret_cast<char*>(&player_status_) + sizeof(match_inprogress_));
  _cached_size_ = 0;
}

battle_state::~battle_state() {
  // @@protoc_insertion_point(destructor:emulator.battle_state)
  SharedDtor();
}

void battle_state::SharedDtor() {
}

void battle_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_state_descriptor_;
}

const battle_state& battle_state::default_instance() {
  protobuf_InitDefaults_emulator_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<battle_state> battle_state_default_instance_;

battle_state* battle_state::New(::google::protobuf::Arena* arena) const {
  battle_state* n = new battle_state;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void battle_state::Clear() {
// @@protoc_insertion_point(message_clear_start:emulator.battle_state)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(battle_state, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<battle_state*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(player_status_, match_inprogress_);

#undef ZR_HELPER_
#undef ZR_

}

bool battle_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:emulator.battle_state)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool player_status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_inProgress;
        break;
      }

      // optional uint32 match_inProgress = 2;
      case 2: {
        if (tag == 16) {
         parse_match_inProgress:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_inprogress_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:emulator.battle_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:emulator.battle_state)
  return false;
#undef DO_
}

void battle_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:emulator.battle_state)
  // optional bool player_status = 1;
  if (this->player_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->player_status(), output);
  }

  // optional uint32 match_inProgress = 2;
  if (this->match_inprogress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->match_inprogress(), output);
  }

  // @@protoc_insertion_point(serialize_end:emulator.battle_state)
}

::google::protobuf::uint8* battle_state::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:emulator.battle_state)
  // optional bool player_status = 1;
  if (this->player_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->player_status(), target);
  }

  // optional uint32 match_inProgress = 2;
  if (this->match_inprogress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->match_inprogress(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:emulator.battle_state)
  return target;
}

size_t battle_state::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emulator.battle_state)
  size_t total_size = 0;

  // optional bool player_status = 1;
  if (this->player_status() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 match_inProgress = 2;
  if (this->match_inprogress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_inprogress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_state::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emulator.battle_state)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const battle_state* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const battle_state>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emulator.battle_state)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emulator.battle_state)
    UnsafeMergeFrom(*source);
  }
}

void battle_state::MergeFrom(const battle_state& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emulator.battle_state)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void battle_state::UnsafeMergeFrom(const battle_state& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.player_status() != 0) {
    set_player_status(from.player_status());
  }
  if (from.match_inprogress() != 0) {
    set_match_inprogress(from.match_inprogress());
  }
}

void battle_state::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emulator.battle_state)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_state::CopyFrom(const battle_state& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emulator.battle_state)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool battle_state::IsInitialized() const {

  return true;
}

void battle_state::Swap(battle_state* other) {
  if (other == this) return;
  InternalSwap(other);
}
void battle_state::InternalSwap(battle_state* other) {
  std::swap(player_status_, other->player_status_);
  std::swap(match_inprogress_, other->match_inprogress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata battle_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_state_descriptor_;
  metadata.reflection = battle_state_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// battle_state

// optional bool player_status = 1;
void battle_state::clear_player_status() {
  player_status_ = false;
}
bool battle_state::player_status() const {
  // @@protoc_insertion_point(field_get:emulator.battle_state.player_status)
  return player_status_;
}
void battle_state::set_player_status(bool value) {
  
  player_status_ = value;
  // @@protoc_insertion_point(field_set:emulator.battle_state.player_status)
}

// optional uint32 match_inProgress = 2;
void battle_state::clear_match_inprogress() {
  match_inprogress_ = 0u;
}
::google::protobuf::uint32 battle_state::match_inprogress() const {
  // @@protoc_insertion_point(field_get:emulator.battle_state.match_inProgress)
  return match_inprogress_;
}
void battle_state::set_match_inprogress(::google::protobuf::uint32 value) {
  
  match_inprogress_ = value;
  // @@protoc_insertion_point(field_set:emulator.battle_state.match_inProgress)
}

inline const battle_state* battle_state::internal_default_instance() {
  return &battle_state_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int attacks::kTrainerFieldNumber;
const int attacks::kMoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

attacks::attacks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_emulator_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:emulator.attacks)
}

void attacks::InitAsDefaultInstance() {
}

attacks::attacks(const attacks& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:emulator.attacks)
}

void attacks::SharedCtor() {
  ::memset(&trainer_, 0, reinterpret_cast<char*>(&move_) -
    reinterpret_cast<char*>(&trainer_) + sizeof(move_));
  _cached_size_ = 0;
}

attacks::~attacks() {
  // @@protoc_insertion_point(destructor:emulator.attacks)
  SharedDtor();
}

void attacks::SharedDtor() {
}

void attacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* attacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return attacks_descriptor_;
}

const attacks& attacks::default_instance() {
  protobuf_InitDefaults_emulator_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<attacks> attacks_default_instance_;

attacks* attacks::New(::google::protobuf::Arena* arena) const {
  attacks* n = new attacks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void attacks::Clear() {
// @@protoc_insertion_point(message_clear_start:emulator.attacks)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(attacks, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<attacks*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(trainer_, move_);

#undef ZR_HELPER_
#undef ZR_

}

bool attacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:emulator.attacks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool trainer = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trainer_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_move;
        break;
      }

      // optional uint32 move = 2;
      case 2: {
        if (tag == 16) {
         parse_move:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:emulator.attacks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:emulator.attacks)
  return false;
#undef DO_
}

void attacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:emulator.attacks)
  // optional bool trainer = 1;
  if (this->trainer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->trainer(), output);
  }

  // optional uint32 move = 2;
  if (this->move() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->move(), output);
  }

  // @@protoc_insertion_point(serialize_end:emulator.attacks)
}

::google::protobuf::uint8* attacks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:emulator.attacks)
  // optional bool trainer = 1;
  if (this->trainer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->trainer(), target);
  }

  // optional uint32 move = 2;
  if (this->move() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->move(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:emulator.attacks)
  return target;
}

size_t attacks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emulator.attacks)
  size_t total_size = 0;

  // optional bool trainer = 1;
  if (this->trainer() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 move = 2;
  if (this->move() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->move());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void attacks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emulator.attacks)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const attacks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const attacks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emulator.attacks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emulator.attacks)
    UnsafeMergeFrom(*source);
  }
}

void attacks::MergeFrom(const attacks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emulator.attacks)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void attacks::UnsafeMergeFrom(const attacks& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.trainer() != 0) {
    set_trainer(from.trainer());
  }
  if (from.move() != 0) {
    set_move(from.move());
  }
}

void attacks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emulator.attacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void attacks::CopyFrom(const attacks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emulator.attacks)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool attacks::IsInitialized() const {

  return true;
}

void attacks::Swap(attacks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void attacks::InternalSwap(attacks* other) {
  std::swap(trainer_, other->trainer_);
  std::swap(move_, other->move_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata attacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = attacks_descriptor_;
  metadata.reflection = attacks_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// attacks

// optional bool trainer = 1;
void attacks::clear_trainer() {
  trainer_ = false;
}
bool attacks::trainer() const {
  // @@protoc_insertion_point(field_get:emulator.attacks.trainer)
  return trainer_;
}
void attacks::set_trainer(bool value) {
  
  trainer_ = value;
  // @@protoc_insertion_point(field_set:emulator.attacks.trainer)
}

// optional uint32 move = 2;
void attacks::clear_move() {
  move_ = 0u;
}
::google::protobuf::uint32 attacks::move() const {
  // @@protoc_insertion_point(field_get:emulator.attacks.move)
  return move_;
}
void attacks::set_move(::google::protobuf::uint32 value) {
  
  move_ = value;
  // @@protoc_insertion_point(field_set:emulator.attacks.move)
}

inline const attacks* attacks::internal_default_instance() {
  return &attacks_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int emu_msg::kBattleCtlFieldNumber;
const int emu_msg::kBattleMoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

emu_msg::emu_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_emulator_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:emulator.emu_msg)
}

void emu_msg::InitAsDefaultInstance() {
  emu_msg_default_oneof_instance_->battle_ctl_ = const_cast< ::emulator::battle_state*>(
      ::emulator::battle_state::internal_default_instance());
  emu_msg_default_oneof_instance_->battle_move_ = const_cast< ::emulator::attacks*>(
      ::emulator::attacks::internal_default_instance());
}

emu_msg::emu_msg(const emu_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:emulator.emu_msg)
}

void emu_msg::SharedCtor() {
  clear_has_msg();
  _cached_size_ = 0;
}

emu_msg::~emu_msg() {
  // @@protoc_insertion_point(destructor:emulator.emu_msg)
  SharedDtor();
}

void emu_msg::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void emu_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emu_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emu_msg_descriptor_;
}

const emu_msg& emu_msg::default_instance() {
  protobuf_InitDefaults_emulator_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<emu_msg> emu_msg_default_instance_;

emu_msg* emu_msg::New(::google::protobuf::Arena* arena) const {
  emu_msg* n = new emu_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void emu_msg::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:emulator.emu_msg)
  switch (msg_case()) {
    case kBattleCtl: {
      delete msg_.battle_ctl_;
      break;
    }
    case kBattleMove: {
      delete msg_.battle_move_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void emu_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:emulator.emu_msg)
  clear_msg();
}

bool emu_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:emulator.emu_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .emulator.battle_state battle_ctl = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_ctl()));
        } else {
          goto handle_unusual;
        }
        goto after_battle_move;
        break;
      }

      // optional .emulator.attacks battle_move = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_move()));
        } else {
          goto handle_unusual;
        }
       after_battle_move:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:emulator.emu_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:emulator.emu_msg)
  return false;
#undef DO_
}

void emu_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:emulator.emu_msg)
  // optional .emulator.battle_state battle_ctl = 1;
  if (has_battle_ctl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.battle_ctl_, output);
  }

  // optional .emulator.attacks battle_move = 2;
  if (has_battle_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.battle_move_, output);
  }

  // @@protoc_insertion_point(serialize_end:emulator.emu_msg)
}

::google::protobuf::uint8* emu_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:emulator.emu_msg)
  // optional .emulator.battle_state battle_ctl = 1;
  if (has_battle_ctl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.battle_ctl_, false, target);
  }

  // optional .emulator.attacks battle_move = 2;
  if (has_battle_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.battle_move_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:emulator.emu_msg)
  return target;
}

size_t emu_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emulator.emu_msg)
  size_t total_size = 0;

  switch (msg_case()) {
    // optional .emulator.battle_state battle_ctl = 1;
    case kBattleCtl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.battle_ctl_);
      break;
    }
    // optional .emulator.attacks battle_move = 2;
    case kBattleMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.battle_move_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emu_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emulator.emu_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const emu_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const emu_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emulator.emu_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emulator.emu_msg)
    UnsafeMergeFrom(*source);
  }
}

void emu_msg::MergeFrom(const emu_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emulator.emu_msg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void emu_msg::UnsafeMergeFrom(const emu_msg& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_case()) {
    case kBattleCtl: {
      mutable_battle_ctl()->::emulator::battle_state::MergeFrom(from.battle_ctl());
      break;
    }
    case kBattleMove: {
      mutable_battle_move()->::emulator::attacks::MergeFrom(from.battle_move());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void emu_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emulator.emu_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emu_msg::CopyFrom(const emu_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emulator.emu_msg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool emu_msg::IsInitialized() const {

  return true;
}

void emu_msg::Swap(emu_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void emu_msg::InternalSwap(emu_msg* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata emu_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emu_msg_descriptor_;
  metadata.reflection = emu_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// emu_msg

// optional .emulator.battle_state battle_ctl = 1;
bool emu_msg::has_battle_ctl() const {
  return msg_case() == kBattleCtl;
}
void emu_msg::set_has_battle_ctl() {
  _oneof_case_[0] = kBattleCtl;
}
void emu_msg::clear_battle_ctl() {
  if (has_battle_ctl()) {
    delete msg_.battle_ctl_;
    clear_has_msg();
  }
}
 const ::emulator::battle_state& emu_msg::battle_ctl() const {
  // @@protoc_insertion_point(field_get:emulator.emu_msg.battle_ctl)
  return has_battle_ctl()
      ? *msg_.battle_ctl_
      : ::emulator::battle_state::default_instance();
}
::emulator::battle_state* emu_msg::mutable_battle_ctl() {
  if (!has_battle_ctl()) {
    clear_msg();
    set_has_battle_ctl();
    msg_.battle_ctl_ = new ::emulator::battle_state;
  }
  // @@protoc_insertion_point(field_mutable:emulator.emu_msg.battle_ctl)
  return msg_.battle_ctl_;
}
::emulator::battle_state* emu_msg::release_battle_ctl() {
  // @@protoc_insertion_point(field_release:emulator.emu_msg.battle_ctl)
  if (has_battle_ctl()) {
    clear_has_msg();
    ::emulator::battle_state* temp = msg_.battle_ctl_;
    msg_.battle_ctl_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void emu_msg::set_allocated_battle_ctl(::emulator::battle_state* battle_ctl) {
  clear_msg();
  if (battle_ctl) {
    set_has_battle_ctl();
    msg_.battle_ctl_ = battle_ctl;
  }
  // @@protoc_insertion_point(field_set_allocated:emulator.emu_msg.battle_ctl)
}

// optional .emulator.attacks battle_move = 2;
bool emu_msg::has_battle_move() const {
  return msg_case() == kBattleMove;
}
void emu_msg::set_has_battle_move() {
  _oneof_case_[0] = kBattleMove;
}
void emu_msg::clear_battle_move() {
  if (has_battle_move()) {
    delete msg_.battle_move_;
    clear_has_msg();
  }
}
 const ::emulator::attacks& emu_msg::battle_move() const {
  // @@protoc_insertion_point(field_get:emulator.emu_msg.battle_move)
  return has_battle_move()
      ? *msg_.battle_move_
      : ::emulator::attacks::default_instance();
}
::emulator::attacks* emu_msg::mutable_battle_move() {
  if (!has_battle_move()) {
    clear_msg();
    set_has_battle_move();
    msg_.battle_move_ = new ::emulator::attacks;
  }
  // @@protoc_insertion_point(field_mutable:emulator.emu_msg.battle_move)
  return msg_.battle_move_;
}
::emulator::attacks* emu_msg::release_battle_move() {
  // @@protoc_insertion_point(field_release:emulator.emu_msg.battle_move)
  if (has_battle_move()) {
    clear_has_msg();
    ::emulator::attacks* temp = msg_.battle_move_;
    msg_.battle_move_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void emu_msg::set_allocated_battle_move(::emulator::attacks* battle_move) {
  clear_msg();
  if (battle_move) {
    set_has_battle_move();
    msg_.battle_move_ = battle_move;
  }
  // @@protoc_insertion_point(field_set_allocated:emulator.emu_msg.battle_move)
}

bool emu_msg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void emu_msg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
emu_msg::MsgCase emu_msg::msg_case() const {
  return emu_msg::MsgCase(_oneof_case_[0]);
}
inline const emu_msg* emu_msg::internal_default_instance() {
  return &emu_msg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace emulator

// @@protoc_insertion_point(global_scope)
