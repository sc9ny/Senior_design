// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace status {

namespace {

const ::google::protobuf::Descriptor* request_complete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_complete_reflection_ = NULL;
const ::google::protobuf::Descriptor* request_resend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_resend_reflection_ = NULL;
const ::google::protobuf::Descriptor* device_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  device_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* status_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  status_msg_reflection_ = NULL;
struct status_msgOneofInstance {
  const ::status::request_complete* done_;
  const ::status::request_resend* again_;
  const ::status::device_status* stats_;
}* status_msg_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_status_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_status_2eproto() {
  protobuf_AddDesc_status_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "status.proto");
  GOOGLE_CHECK(file != NULL);
  request_complete_descriptor_ = file->message_type(0);
  static const int request_complete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_complete, sequence_number_),
  };
  request_complete_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      request_complete_descriptor_,
      request_complete::internal_default_instance(),
      request_complete_offsets_,
      -1,
      -1,
      -1,
      sizeof(request_complete),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_complete, _internal_metadata_));
  request_resend_descriptor_ = file->message_type(1);
  static const int request_resend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_resend, sequence_number_),
  };
  request_resend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      request_resend_descriptor_,
      request_resend::internal_default_instance(),
      request_resend_offsets_,
      -1,
      -1,
      -1,
      sizeof(request_resend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_resend, _internal_metadata_));
  device_status_descriptor_ = file->message_type(2);
  static const int device_status_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_status, server_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_status, controller_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_status, trainer_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_status, pikachu_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_status, emulator_up_),
  };
  device_status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      device_status_descriptor_,
      device_status::internal_default_instance(),
      device_status_offsets_,
      -1,
      -1,
      -1,
      sizeof(device_status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(device_status, _internal_metadata_));
  status_msg_descriptor_ = file->message_type(3);
  static const int status_msg_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(status_msg_default_oneof_instance_, done_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(status_msg_default_oneof_instance_, again_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(status_msg_default_oneof_instance_, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_msg, msg_),
  };
  status_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      status_msg_descriptor_,
      status_msg::internal_default_instance(),
      status_msg_offsets_,
      -1,
      -1,
      -1,
      status_msg_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_msg, _oneof_case_[0]),
      sizeof(status_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(status_msg, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_status_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      request_complete_descriptor_, request_complete::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      request_resend_descriptor_, request_resend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      device_status_descriptor_, device_status::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      status_msg_descriptor_, status_msg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_status_2eproto() {
  request_complete_default_instance_.Shutdown();
  delete request_complete_reflection_;
  request_resend_default_instance_.Shutdown();
  delete request_resend_reflection_;
  device_status_default_instance_.Shutdown();
  delete device_status_reflection_;
  status_msg_default_instance_.Shutdown();
  delete status_msg_default_oneof_instance_;
  delete status_msg_reflection_;
}

void protobuf_InitDefaults_status_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  request_complete_default_instance_.DefaultConstruct();
  request_resend_default_instance_.DefaultConstruct();
  device_status_default_instance_.DefaultConstruct();
  status_msg_default_instance_.DefaultConstruct();
  status_msg_default_oneof_instance_ = new status_msgOneofInstance();
  request_complete_default_instance_.get_mutable()->InitAsDefaultInstance();
  request_resend_default_instance_.get_mutable()->InitAsDefaultInstance();
  device_status_default_instance_.get_mutable()->InitAsDefaultInstance();
  status_msg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_status_2eproto_once_);
void protobuf_InitDefaults_status_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_status_2eproto_once_,
                 &protobuf_InitDefaults_status_2eproto_impl);
}
void protobuf_AddDesc_status_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_status_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014status.proto\022\006status\"+\n\020request_comple"
    "te\022\027\n\017sequence_number\030\001 \001(\005\")\n\016request_r"
    "esend\022\027\n\017sequence_number\030\001 \001(\005\"v\n\rdevice"
    "_status\022\021\n\tserver_up\030\001 \001(\010\022\025\n\rcontroller"
    "_up\030\002 \001(\010\022\022\n\ntrainer_up\030\003 \001(\010\022\022\n\npikachu"
    "_up\030\004 \001(\010\022\023\n\013emulator_up\030\005 \001(\010\"\216\001\n\nstatu"
    "s_msg\022(\n\004done\030\001 \001(\0132\030.status.request_com"
    "pleteH\000\022\'\n\005again\030\002 \001(\0132\026.status.request_"
    "resendH\000\022&\n\005stats\030\003 \001(\0132\025.status.device_"
    "statusH\000B\005\n\003msgb\006proto3", 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "status.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_status_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_status_2eproto_once_);
void protobuf_AddDesc_status_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_status_2eproto_once_,
                 &protobuf_AddDesc_status_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_status_2eproto {
  StaticDescriptorInitializer_status_2eproto() {
    protobuf_AddDesc_status_2eproto();
  }
} static_descriptor_initializer_status_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int request_complete::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

request_complete::request_complete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_status_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:status.request_complete)
}

void request_complete::InitAsDefaultInstance() {
}

request_complete::request_complete(const request_complete& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:status.request_complete)
}

void request_complete::SharedCtor() {
  sequence_number_ = 0;
  _cached_size_ = 0;
}

request_complete::~request_complete() {
  // @@protoc_insertion_point(destructor:status.request_complete)
  SharedDtor();
}

void request_complete::SharedDtor() {
}

void request_complete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request_complete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_complete_descriptor_;
}

const request_complete& request_complete::default_instance() {
  protobuf_InitDefaults_status_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<request_complete> request_complete_default_instance_;

request_complete* request_complete::New(::google::protobuf::Arena* arena) const {
  request_complete* n = new request_complete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void request_complete::Clear() {
// @@protoc_insertion_point(message_clear_start:status.request_complete)
  sequence_number_ = 0;
}

bool request_complete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:status.request_complete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_number = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:status.request_complete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:status.request_complete)
  return false;
#undef DO_
}

void request_complete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:status.request_complete)
  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:status.request_complete)
}

::google::protobuf::uint8* request_complete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:status.request_complete)
  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:status.request_complete)
  return target;
}

size_t request_complete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:status.request_complete)
  size_t total_size = 0;

  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request_complete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:status.request_complete)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const request_complete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const request_complete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:status.request_complete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:status.request_complete)
    UnsafeMergeFrom(*source);
  }
}

void request_complete::MergeFrom(const request_complete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:status.request_complete)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void request_complete::UnsafeMergeFrom(const request_complete& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
}

void request_complete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:status.request_complete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_complete::CopyFrom(const request_complete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:status.request_complete)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool request_complete::IsInitialized() const {

  return true;
}

void request_complete::Swap(request_complete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void request_complete::InternalSwap(request_complete* other) {
  std::swap(sequence_number_, other->sequence_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata request_complete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_complete_descriptor_;
  metadata.reflection = request_complete_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// request_complete

// optional int32 sequence_number = 1;
void request_complete::clear_sequence_number() {
  sequence_number_ = 0;
}
::google::protobuf::int32 request_complete::sequence_number() const {
  // @@protoc_insertion_point(field_get:status.request_complete.sequence_number)
  return sequence_number_;
}
void request_complete::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:status.request_complete.sequence_number)
}

inline const request_complete* request_complete::internal_default_instance() {
  return &request_complete_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int request_resend::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

request_resend::request_resend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_status_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:status.request_resend)
}

void request_resend::InitAsDefaultInstance() {
}

request_resend::request_resend(const request_resend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:status.request_resend)
}

void request_resend::SharedCtor() {
  sequence_number_ = 0;
  _cached_size_ = 0;
}

request_resend::~request_resend() {
  // @@protoc_insertion_point(destructor:status.request_resend)
  SharedDtor();
}

void request_resend::SharedDtor() {
}

void request_resend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request_resend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_resend_descriptor_;
}

const request_resend& request_resend::default_instance() {
  protobuf_InitDefaults_status_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<request_resend> request_resend_default_instance_;

request_resend* request_resend::New(::google::protobuf::Arena* arena) const {
  request_resend* n = new request_resend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void request_resend::Clear() {
// @@protoc_insertion_point(message_clear_start:status.request_resend)
  sequence_number_ = 0;
}

bool request_resend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:status.request_resend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_number = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:status.request_resend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:status.request_resend)
  return false;
#undef DO_
}

void request_resend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:status.request_resend)
  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:status.request_resend)
}

::google::protobuf::uint8* request_resend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:status.request_resend)
  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:status.request_resend)
  return target;
}

size_t request_resend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:status.request_resend)
  size_t total_size = 0;

  // optional int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request_resend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:status.request_resend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const request_resend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const request_resend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:status.request_resend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:status.request_resend)
    UnsafeMergeFrom(*source);
  }
}

void request_resend::MergeFrom(const request_resend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:status.request_resend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void request_resend::UnsafeMergeFrom(const request_resend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
}

void request_resend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:status.request_resend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_resend::CopyFrom(const request_resend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:status.request_resend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool request_resend::IsInitialized() const {

  return true;
}

void request_resend::Swap(request_resend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void request_resend::InternalSwap(request_resend* other) {
  std::swap(sequence_number_, other->sequence_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata request_resend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_resend_descriptor_;
  metadata.reflection = request_resend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// request_resend

// optional int32 sequence_number = 1;
void request_resend::clear_sequence_number() {
  sequence_number_ = 0;
}
::google::protobuf::int32 request_resend::sequence_number() const {
  // @@protoc_insertion_point(field_get:status.request_resend.sequence_number)
  return sequence_number_;
}
void request_resend::set_sequence_number(::google::protobuf::int32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:status.request_resend.sequence_number)
}

inline const request_resend* request_resend::internal_default_instance() {
  return &request_resend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int device_status::kServerUpFieldNumber;
const int device_status::kControllerUpFieldNumber;
const int device_status::kTrainerUpFieldNumber;
const int device_status::kPikachuUpFieldNumber;
const int device_status::kEmulatorUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

device_status::device_status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_status_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:status.device_status)
}

void device_status::InitAsDefaultInstance() {
}

device_status::device_status(const device_status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:status.device_status)
}

void device_status::SharedCtor() {
  ::memset(&server_up_, 0, reinterpret_cast<char*>(&emulator_up_) -
    reinterpret_cast<char*>(&server_up_) + sizeof(emulator_up_));
  _cached_size_ = 0;
}

device_status::~device_status() {
  // @@protoc_insertion_point(destructor:status.device_status)
  SharedDtor();
}

void device_status::SharedDtor() {
}

void device_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return device_status_descriptor_;
}

const device_status& device_status::default_instance() {
  protobuf_InitDefaults_status_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<device_status> device_status_default_instance_;

device_status* device_status::New(::google::protobuf::Arena* arena) const {
  device_status* n = new device_status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void device_status::Clear() {
// @@protoc_insertion_point(message_clear_start:status.device_status)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(device_status, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<device_status*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(server_up_, emulator_up_);

#undef ZR_HELPER_
#undef ZR_

}

bool device_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:status.device_status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool server_up = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_up_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_controller_up;
        break;
      }

      // optional bool controller_up = 2;
      case 2: {
        if (tag == 16) {
         parse_controller_up:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &controller_up_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trainer_up;
        break;
      }

      // optional bool trainer_up = 3;
      case 3: {
        if (tag == 24) {
         parse_trainer_up:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trainer_up_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pikachu_up;
        break;
      }

      // optional bool pikachu_up = 4;
      case 4: {
        if (tag == 32) {
         parse_pikachu_up:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pikachu_up_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_emulator_up;
        break;
      }

      // optional bool emulator_up = 5;
      case 5: {
        if (tag == 40) {
         parse_emulator_up:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emulator_up_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:status.device_status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:status.device_status)
  return false;
#undef DO_
}

void device_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:status.device_status)
  // optional bool server_up = 1;
  if (this->server_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->server_up(), output);
  }

  // optional bool controller_up = 2;
  if (this->controller_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->controller_up(), output);
  }

  // optional bool trainer_up = 3;
  if (this->trainer_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trainer_up(), output);
  }

  // optional bool pikachu_up = 4;
  if (this->pikachu_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pikachu_up(), output);
  }

  // optional bool emulator_up = 5;
  if (this->emulator_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->emulator_up(), output);
  }

  // @@protoc_insertion_point(serialize_end:status.device_status)
}

::google::protobuf::uint8* device_status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:status.device_status)
  // optional bool server_up = 1;
  if (this->server_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->server_up(), target);
  }

  // optional bool controller_up = 2;
  if (this->controller_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->controller_up(), target);
  }

  // optional bool trainer_up = 3;
  if (this->trainer_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trainer_up(), target);
  }

  // optional bool pikachu_up = 4;
  if (this->pikachu_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pikachu_up(), target);
  }

  // optional bool emulator_up = 5;
  if (this->emulator_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->emulator_up(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:status.device_status)
  return target;
}

size_t device_status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:status.device_status)
  size_t total_size = 0;

  // optional bool server_up = 1;
  if (this->server_up() != 0) {
    total_size += 1 + 1;
  }

  // optional bool controller_up = 2;
  if (this->controller_up() != 0) {
    total_size += 1 + 1;
  }

  // optional bool trainer_up = 3;
  if (this->trainer_up() != 0) {
    total_size += 1 + 1;
  }

  // optional bool pikachu_up = 4;
  if (this->pikachu_up() != 0) {
    total_size += 1 + 1;
  }

  // optional bool emulator_up = 5;
  if (this->emulator_up() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device_status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:status.device_status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const device_status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const device_status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:status.device_status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:status.device_status)
    UnsafeMergeFrom(*source);
  }
}

void device_status::MergeFrom(const device_status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:status.device_status)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void device_status::UnsafeMergeFrom(const device_status& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.server_up() != 0) {
    set_server_up(from.server_up());
  }
  if (from.controller_up() != 0) {
    set_controller_up(from.controller_up());
  }
  if (from.trainer_up() != 0) {
    set_trainer_up(from.trainer_up());
  }
  if (from.pikachu_up() != 0) {
    set_pikachu_up(from.pikachu_up());
  }
  if (from.emulator_up() != 0) {
    set_emulator_up(from.emulator_up());
  }
}

void device_status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:status.device_status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_status::CopyFrom(const device_status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:status.device_status)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool device_status::IsInitialized() const {

  return true;
}

void device_status::Swap(device_status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void device_status::InternalSwap(device_status* other) {
  std::swap(server_up_, other->server_up_);
  std::swap(controller_up_, other->controller_up_);
  std::swap(trainer_up_, other->trainer_up_);
  std::swap(pikachu_up_, other->pikachu_up_);
  std::swap(emulator_up_, other->emulator_up_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata device_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = device_status_descriptor_;
  metadata.reflection = device_status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// device_status

// optional bool server_up = 1;
void device_status::clear_server_up() {
  server_up_ = false;
}
bool device_status::server_up() const {
  // @@protoc_insertion_point(field_get:status.device_status.server_up)
  return server_up_;
}
void device_status::set_server_up(bool value) {
  
  server_up_ = value;
  // @@protoc_insertion_point(field_set:status.device_status.server_up)
}

// optional bool controller_up = 2;
void device_status::clear_controller_up() {
  controller_up_ = false;
}
bool device_status::controller_up() const {
  // @@protoc_insertion_point(field_get:status.device_status.controller_up)
  return controller_up_;
}
void device_status::set_controller_up(bool value) {
  
  controller_up_ = value;
  // @@protoc_insertion_point(field_set:status.device_status.controller_up)
}

// optional bool trainer_up = 3;
void device_status::clear_trainer_up() {
  trainer_up_ = false;
}
bool device_status::trainer_up() const {
  // @@protoc_insertion_point(field_get:status.device_status.trainer_up)
  return trainer_up_;
}
void device_status::set_trainer_up(bool value) {
  
  trainer_up_ = value;
  // @@protoc_insertion_point(field_set:status.device_status.trainer_up)
}

// optional bool pikachu_up = 4;
void device_status::clear_pikachu_up() {
  pikachu_up_ = false;
}
bool device_status::pikachu_up() const {
  // @@protoc_insertion_point(field_get:status.device_status.pikachu_up)
  return pikachu_up_;
}
void device_status::set_pikachu_up(bool value) {
  
  pikachu_up_ = value;
  // @@protoc_insertion_point(field_set:status.device_status.pikachu_up)
}

// optional bool emulator_up = 5;
void device_status::clear_emulator_up() {
  emulator_up_ = false;
}
bool device_status::emulator_up() const {
  // @@protoc_insertion_point(field_get:status.device_status.emulator_up)
  return emulator_up_;
}
void device_status::set_emulator_up(bool value) {
  
  emulator_up_ = value;
  // @@protoc_insertion_point(field_set:status.device_status.emulator_up)
}

inline const device_status* device_status::internal_default_instance() {
  return &device_status_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int status_msg::kDoneFieldNumber;
const int status_msg::kAgainFieldNumber;
const int status_msg::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

status_msg::status_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_status_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:status.status_msg)
}

void status_msg::InitAsDefaultInstance() {
  status_msg_default_oneof_instance_->done_ = const_cast< ::status::request_complete*>(
      ::status::request_complete::internal_default_instance());
  status_msg_default_oneof_instance_->again_ = const_cast< ::status::request_resend*>(
      ::status::request_resend::internal_default_instance());
  status_msg_default_oneof_instance_->stats_ = const_cast< ::status::device_status*>(
      ::status::device_status::internal_default_instance());
}

status_msg::status_msg(const status_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:status.status_msg)
}

void status_msg::SharedCtor() {
  clear_has_msg();
  _cached_size_ = 0;
}

status_msg::~status_msg() {
  // @@protoc_insertion_point(destructor:status.status_msg)
  SharedDtor();
}

void status_msg::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void status_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* status_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return status_msg_descriptor_;
}

const status_msg& status_msg::default_instance() {
  protobuf_InitDefaults_status_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<status_msg> status_msg_default_instance_;

status_msg* status_msg::New(::google::protobuf::Arena* arena) const {
  status_msg* n = new status_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void status_msg::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:status.status_msg)
  switch (msg_case()) {
    case kDone: {
      delete msg_.done_;
      break;
    }
    case kAgain: {
      delete msg_.again_;
      break;
    }
    case kStats: {
      delete msg_.stats_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void status_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:status.status_msg)
  clear_msg();
}

bool status_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:status.status_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .status.request_complete done = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_done()));
        } else {
          goto handle_unusual;
        }
        goto after_stats;
        break;
      }

      // optional .status.request_resend again = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_again()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stats;
        break;
      }

      // optional .status.device_status stats = 3;
      case 3: {
        if (tag == 26) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
       after_stats:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:status.status_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:status.status_msg)
  return false;
#undef DO_
}

void status_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:status.status_msg)
  // optional .status.request_complete done = 1;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.done_, output);
  }

  // optional .status.request_resend again = 2;
  if (has_again()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.again_, output);
  }

  // optional .status.device_status stats = 3;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:status.status_msg)
}

::google::protobuf::uint8* status_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:status.status_msg)
  // optional .status.request_complete done = 1;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.done_, false, target);
  }

  // optional .status.request_resend again = 2;
  if (has_again()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.again_, false, target);
  }

  // optional .status.device_status stats = 3;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *msg_.stats_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:status.status_msg)
  return target;
}

size_t status_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:status.status_msg)
  size_t total_size = 0;

  switch (msg_case()) {
    // optional .status.request_complete done = 1;
    case kDone: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.done_);
      break;
    }
    // optional .status.request_resend again = 2;
    case kAgain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.again_);
      break;
    }
    // optional .status.device_status stats = 3;
    case kStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.stats_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void status_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:status.status_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const status_msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const status_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:status.status_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:status.status_msg)
    UnsafeMergeFrom(*source);
  }
}

void status_msg::MergeFrom(const status_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:status.status_msg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void status_msg::UnsafeMergeFrom(const status_msg& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.msg_case()) {
    case kDone: {
      mutable_done()->::status::request_complete::MergeFrom(from.done());
      break;
    }
    case kAgain: {
      mutable_again()->::status::request_resend::MergeFrom(from.again());
      break;
    }
    case kStats: {
      mutable_stats()->::status::device_status::MergeFrom(from.stats());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void status_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:status.status_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void status_msg::CopyFrom(const status_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:status.status_msg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool status_msg::IsInitialized() const {

  return true;
}

void status_msg::Swap(status_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void status_msg::InternalSwap(status_msg* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata status_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = status_msg_descriptor_;
  metadata.reflection = status_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// status_msg

// optional .status.request_complete done = 1;
bool status_msg::has_done() const {
  return msg_case() == kDone;
}
void status_msg::set_has_done() {
  _oneof_case_[0] = kDone;
}
void status_msg::clear_done() {
  if (has_done()) {
    delete msg_.done_;
    clear_has_msg();
  }
}
 const ::status::request_complete& status_msg::done() const {
  // @@protoc_insertion_point(field_get:status.status_msg.done)
  return has_done()
      ? *msg_.done_
      : ::status::request_complete::default_instance();
}
::status::request_complete* status_msg::mutable_done() {
  if (!has_done()) {
    clear_msg();
    set_has_done();
    msg_.done_ = new ::status::request_complete;
  }
  // @@protoc_insertion_point(field_mutable:status.status_msg.done)
  return msg_.done_;
}
::status::request_complete* status_msg::release_done() {
  // @@protoc_insertion_point(field_release:status.status_msg.done)
  if (has_done()) {
    clear_has_msg();
    ::status::request_complete* temp = msg_.done_;
    msg_.done_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void status_msg::set_allocated_done(::status::request_complete* done) {
  clear_msg();
  if (done) {
    set_has_done();
    msg_.done_ = done;
  }
  // @@protoc_insertion_point(field_set_allocated:status.status_msg.done)
}

// optional .status.request_resend again = 2;
bool status_msg::has_again() const {
  return msg_case() == kAgain;
}
void status_msg::set_has_again() {
  _oneof_case_[0] = kAgain;
}
void status_msg::clear_again() {
  if (has_again()) {
    delete msg_.again_;
    clear_has_msg();
  }
}
 const ::status::request_resend& status_msg::again() const {
  // @@protoc_insertion_point(field_get:status.status_msg.again)
  return has_again()
      ? *msg_.again_
      : ::status::request_resend::default_instance();
}
::status::request_resend* status_msg::mutable_again() {
  if (!has_again()) {
    clear_msg();
    set_has_again();
    msg_.again_ = new ::status::request_resend;
  }
  // @@protoc_insertion_point(field_mutable:status.status_msg.again)
  return msg_.again_;
}
::status::request_resend* status_msg::release_again() {
  // @@protoc_insertion_point(field_release:status.status_msg.again)
  if (has_again()) {
    clear_has_msg();
    ::status::request_resend* temp = msg_.again_;
    msg_.again_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void status_msg::set_allocated_again(::status::request_resend* again) {
  clear_msg();
  if (again) {
    set_has_again();
    msg_.again_ = again;
  }
  // @@protoc_insertion_point(field_set_allocated:status.status_msg.again)
}

// optional .status.device_status stats = 3;
bool status_msg::has_stats() const {
  return msg_case() == kStats;
}
void status_msg::set_has_stats() {
  _oneof_case_[0] = kStats;
}
void status_msg::clear_stats() {
  if (has_stats()) {
    delete msg_.stats_;
    clear_has_msg();
  }
}
 const ::status::device_status& status_msg::stats() const {
  // @@protoc_insertion_point(field_get:status.status_msg.stats)
  return has_stats()
      ? *msg_.stats_
      : ::status::device_status::default_instance();
}
::status::device_status* status_msg::mutable_stats() {
  if (!has_stats()) {
    clear_msg();
    set_has_stats();
    msg_.stats_ = new ::status::device_status;
  }
  // @@protoc_insertion_point(field_mutable:status.status_msg.stats)
  return msg_.stats_;
}
::status::device_status* status_msg::release_stats() {
  // @@protoc_insertion_point(field_release:status.status_msg.stats)
  if (has_stats()) {
    clear_has_msg();
    ::status::device_status* temp = msg_.stats_;
    msg_.stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void status_msg::set_allocated_stats(::status::device_status* stats) {
  clear_msg();
  if (stats) {
    set_has_stats();
    msg_.stats_ = stats;
  }
  // @@protoc_insertion_point(field_set_allocated:status.status_msg.stats)
}

bool status_msg::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void status_msg::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
status_msg::MsgCase status_msg::msg_case() const {
  return status_msg::MsgCase(_oneof_case_[0]);
}
inline const status_msg* status_msg::internal_default_instance() {
  return &status_msg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace status

// @@protoc_insertion_point(global_scope)
